"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[7636],{45076:function(e,o,n){n.r(o),n.d(o,{assets:function(){return l},contentTitle:function(){return u},default:function(){return k},frontMatter:function(){return s},metadata:function(){return r},toc:function(){return d}});var t=n(83117),a=(n(67294),n(3905)),i=n(90814),c=n(5871);const s={id:"account-name",title:"Query the web3name of an Account"},u=void 0,r={unversionedId:"develop/sdk/cookbook/account_linking/account-name",id:"develop/sdk/cookbook/account_linking/account-name",title:"Query the web3name of an Account",description:"For accounts that have been linked to DIDs that have claimed a web3name, the linking feature opens the way to a host of possibilities, e.g., showing the web3name of a collator's account on the KILT Stakeboard.",source:"@site/docs/develop/01_sdk/02_cookbook/03_account_linking/02_account_name.md",sourceDirName:"develop/01_sdk/02_cookbook/03_account_linking",slug:"/develop/sdk/cookbook/account_linking/account-name",permalink:"/docs/develop/sdk/cookbook/account_linking/account-name",draft:!1,editUrl:"https://github.com/KILTprotocol/docs/edit/master/docs/develop/01_sdk/02_cookbook/03_account_linking/02_account_name.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{id:"account-name",title:"Query the web3name of an Account"},sidebar:"sdk",previous:{title:"Link an Account to a KILT DID",permalink:"/docs/develop/sdk/cookbook/account_linking/account-link"},next:{title:"Unlink an Account From a KILT DID",permalink:"/docs/develop/sdk/cookbook/account_linking/account-unlink"}},l={},d=[{value:"Query an Account&#39;s web3name Without the KILT SDK",id:"query-an-accounts-web3name-without-the-kilt-sdk",level:2},{value:"Query an Account&#39;s web3name with the KILT SDK",id:"query-an-accounts-web3name-with-the-kilt-sdk",level:2}],m={toc:d};function k(e){let{components:o,...n}=e;return(0,a.kt)("wrapper",(0,t.Z)({},m,n,{components:o,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"For accounts that have been linked to DIDs that have claimed a web3name, the linking feature opens the way to a host of possibilities, e.g., showing the web3name of a collator's account on the ",(0,a.kt)("a",{parentName:"p",href:"https://stakeboard.kilt.io/"},"KILT Stakeboard"),"."),(0,a.kt)("p",null,"This section shows how to perform the ",(0,a.kt)("inlineCode",{parentName:"p"},"account -> web3name")," querying both with and without the support of the KILT SDK."),(0,a.kt)("h2",{id:"query-an-accounts-web3name-without-the-kilt-sdk"},"Query an Account's web3name Without the KILT SDK"),(0,a.kt)("p",null,"Querying the web3name for a given account without the SDK involves performing two different RPC calls to a KILT full node, as shown below."),(0,a.kt)(i.Z,{className:"language-ts",mdxType:"CodeBlock"},c.Z),(0,a.kt)("h2",{id:"query-an-accounts-web3name-with-the-kilt-sdk"},"Query an Account's web3name with the KILT SDK"),(0,a.kt)("p",null,"Although the SDK still performs the same two RPC queries shown in the code snippets above, it hides the complexity from the user, who only needs to call a single function, as shown below."),(0,a.kt)(i.Z,{className:"language-ts",mdxType:"CodeBlock"},"import type { Option, Struct } from '@polkadot/types'\nimport type { ApiPromise } from '@polkadot/api'\nimport type { KeyringPair } from '@polkadot/keyring/types'\n\nimport { hexToString } from '@polkadot/util'\n\nimport * as Kilt from '@kiltprotocol/sdk-js'\n\nexport async function queryAccountWeb3Name(\n  api: ApiPromise,\n  lookupAccountAddress: KeyringPair['address']\n): Promise<Kilt.Did.Web3Names.Web3Name | null> {\n  // First RPC call to `api.query.didLookup.connectedDids` for account -> DID lookup.\n  const maybeAccountDid = await api.query.didLookup.connectedDids<\n    Option<Struct>\n  >(lookupAccountAddress)\n  if (maybeAccountDid.isNone) {\n    throw `No DID for the KILT account \"${lookupAccountAddress}\".`\n  }\n  const accountDidIdentifier = maybeAccountDid.unwrap()?.get('did')?.toHuman()\n  console.log(\n    `The provided account has been linked to the following DID: \"did:kilt:${accountDidIdentifier}\"`\n  )\n\n  // Second RPC call to `api.query.web3Names.names` for DID -> web3name lookup.\n  const maybeDidName = await api.query.web3Names.names<Option<Struct>>(\n    accountDidIdentifier\n  )\n  if (maybeDidName.isNone) {\n    throw `No web3name for the KILT account \"${lookupAccountAddress}\".`\n  }\n  const web3Name = hexToString(maybeDidName.unwrap()?.toHex())\n  console.log(\n    `The provided account is identifiable by the following web3name: \"w3n:${web3Name}\"`\n  )\n\n  return web3Name\n}\n"),(0,a.kt)("admonition",{type:"info"},(0,a.kt)("p",{parentName:"admonition"},"A custom RPC endpoint is currently under development that would allow reducing the number of calls from 2 to 1 for most of the DID-related lookups.\nWe will update this section with the new information once it has been released.")))}k.isMDXComponent=!0},5871:function(e,o){o.Z="import type { KeyringPair } from '@polkadot/keyring/types'\n\nimport * as Kilt from '@kiltprotocol/sdk-js'\n\nexport async function queryAccountWeb3Name(\n  lookupAccountAddress: KeyringPair['address']\n): Promise<Kilt.Did.Web3Names.Web3Name | null> {\n  // Only function to call to perform the lookup.\n  const accountWeb3Name = await Kilt.Did.AccountLinks.queryWeb3Name(\n    lookupAccountAddress\n  )\n  if (accountWeb3Name) {\n    console.log(\n      `web3name for account \"${lookupAccountAddress}\" -> \"${accountWeb3Name}\"`\n    )\n  } else {\n    console.log(\n      `Account \"${lookupAccountAddress}\" does not have a linked web3name.`\n    )\n  }\n\n  return accountWeb3Name\n}\n"}}]);