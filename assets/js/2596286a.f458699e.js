"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[4537],{3905:function(e,n,t){t.d(n,{Zo:function(){return c},kt:function(){return m}});var i=t(67294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);n&&(i=i.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,i)}return t}function r(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,i,o=function(e,n){if(null==e)return{};var t,i,o={},a=Object.keys(e);for(i=0;i<a.length;i++)t=a[i],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(i=0;i<a.length;i++)t=a[i],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var s=i.createContext({}),d=function(e){var n=i.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):r(r({},n),e)),t},c=function(e){var n=d(e.components);return i.createElement(s.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return i.createElement(i.Fragment,{},n)}},u=i.forwardRef((function(e,n){var t=e.components,o=e.mdxType,a=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),u=d(t),m=o,f=u["".concat(s,".").concat(m)]||u[m]||p[m]||a;return t?i.createElement(f,r(r({ref:n},c),{},{components:t})):i.createElement(f,r({ref:n},c))}));function m(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var a=t.length,r=new Array(a);r[0]=u;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l.mdxType="string"==typeof e?e:o,r[1]=l;for(var d=2;d<a;d++)r[d]=t[d];return i.createElement.apply(null,r)}return i.createElement.apply(null,t)}u.displayName="MDXCreateElement"},20148:function(e,n,t){t.r(n),t.d(n,{assets:function(){return s},contentTitle:function(){return r},default:function(){return p},frontMatter:function(){return a},metadata:function(){return l},toc:function(){return d}});var i=t(83117),o=(t(67294),t(3905));const a={id:"well-known-did-config",title:"Well Known DID Configuration"},r=void 0,l={unversionedId:"develop/dApp/well-known-did-config",id:"develop/dApp/well-known-did-config",title:"Well Known DID Configuration",description:"The Well Known DID Configuration is implemented as a security measure when setting up the communication session between the dapp and extension.",source:"@site/docs/develop/07_dApp/03_well-known-did-config.md",sourceDirName:"develop/07_dApp",slug:"/develop/dApp/well-known-did-config",permalink:"/docs/develop/dApp/well-known-did-config",draft:!1,editUrl:"https://github.com/KILTprotocol/docs/edit/master/docs/develop/07_dApp/03_well-known-did-config.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{id:"well-known-did-config",title:"Well Known DID Configuration"},sidebar:"dApp",previous:{title:"Setting Up the Communication Session",permalink:"/docs/develop/dApp/session"},next:{title:"Overview",permalink:"/docs/develop/dApp/verifier/welcome"}},s={},d=[{value:"Dapp Steps",id:"dapp-steps",level:2},{value:"Attesting the Domain Linkage Credential",id:"attesting-the-domain-linkage-credential",level:3},{value:"Making the claim",id:"making-the-claim",level:4},{value:"Adding the signature",id:"adding-the-signature",level:4},{value:"Self-attesting the credential",id:"self-attesting-the-credential",level:4},{value:"Formatting the Domain Linkage Credential",id:"formatting-the-domain-linkage-credential",level:3}],c={toc:d};function p(e){let{components:n,...t}=e;return(0,o.kt)("wrapper",(0,i.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"The Well Known DID Configuration is implemented as a security measure when setting up the communication session between the dapp and extension."),(0,o.kt)("p",null,"The implementation is based on the ",(0,o.kt)("a",{parentName:"p",href:"https://identity.foundation/.well-known/resources/did-configuration/"},"Well Known DID Configuration")," specified by the Decentralized Identity Foundation:"),(0,o.kt)("h2",{id:"dapp-steps"},"Dapp Steps"),(0,o.kt)("p",null,"Add the following URI to your dapp's root.\nThe extension will make an HTTP GET request to this URI, and your dapp will respond with the domain configuration resource."),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"/.well-known/did-configuration.json")),(0,o.kt)("h3",{id:"attesting-the-domain-linkage-credential"},"Attesting the Domain Linkage Credential"),(0,o.kt)("p",null,"Upon receiving the GET request from the extension, your dapp will make a claim that contains its domain origin and DID.\nThen it will self-attest the claim.\nThis self-attestation is referred to as a Domain Linkage Credential."),(0,o.kt)("h4",{id:"making-the-claim"},"Making the claim"),(0,o.kt)("p",null,"Your dapp's claim is based on the domain linkage CType, which can be created from the existing CType schema:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"import { CType } from '@kiltprotocol/core'\n\nconst domainLinkageCType = CType.fromCType({\n  schema: {\n    $schema: 'http://kilt-protocol.org/draft-01/ctype#',\n    title: 'Domain Linkage Credential',\n    properties: {\n      id: {\n        type: 'string',\n      },\n      origin: {\n        type: 'string',\n      },\n    },\n    type: 'object',\n    $id: 'kilt:ctype:0x9d271c790775ee831352291f01c5d04c7979713a5896dcf5e81708184cc5c643',\n  },\n  owner: null,\n  hash: '0x9d271c790775ee831352291f01c5d04c7979713a5896dcf5e81708184cc5c643',\n})\n")),(0,o.kt)("p",null,"The claim is built from the CType, claim contents, and your dapp's unique DID:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"import { Claim } from '@kiltprotocol/core'\n\nconst did = 'did:kilt:example'\n\nconst claimContents = {\n  id: did,\n  origin: 'https://example-dApp.com',\n}\n\nconst claim = Claim.fromCTypeAndClaimContents(\n  domainLinkageCType,\n  claimContents,\n  did\n)\n")),(0,o.kt)("h4",{id:"adding-the-signature"},"Adding the signature"),(0,o.kt)("p",null,"Your dapp creates a request for attestation based on the claim and signs the request's root hash with its assertion key.\nThe resulting signature is then added to the request for attestation."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"import { RequestForAttestation } from '@kiltprotocol/core'\nimport { FullDidDetails } from '@kiltprotocol/did'\nimport { Crypto } from '@kiltprotocol/utils'\n\nconst requestForAttestation = RequestForAttestation.fromClaim(claim)\n\nconst fullDid = await FullDidDetails.fromChainInfo(did)\n\nconst { signature, keyUri } = await fullDid.signPayload(\n  Crypto.coToUInt8(requestForAttestation.rootHash),\n  assertionKeystore,\n  fullDid.attestationKey.id\n)\n\nconst selfSignedRequest = await requestForAttestation.addSignature(\n  signature,\n  keyUri\n)\n")),(0,o.kt)("h4",{id:"self-attesting-the-credential"},"Self-attesting the credential"),(0,o.kt)("p",null,"Finally, your dapp creates the self-attestation and credential"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"import { Attestation, Credential } from '@kiltprotocol/core'\n\nconst attestation = Attestation.fromRequestAndDid(selfSignedRequest, did)\n\nconst domainLinkageCredential = Credential.fromRequestAndAttestation(\n  selfSignedRequest,\n  attestation\n)\n")),(0,o.kt)("h3",{id:"formatting-the-domain-linkage-credential"},"Formatting the Domain Linkage Credential"),(0,o.kt)("p",null,"The Well Known DID Configuration specificaton requires a specific format (JSON-LD) for the domain linkage credential.\nHere's how you can present your credential to the extension in the expected format."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"const credentialSubject = {\n  ...domainLinkageCredential.request.claim.contents,\n  rootHash: domainLinkageCredential.request.rootHash,\n}\n\nconst issuer = domainLinkageCredential.attestation.owner\n\nconst issuanceDate = new Date().toISOString()\nconst expirationDate = new Date(\n  Date.now() + 1000 * 60 * 60 * 24 * 365 * 5\n).toISOString() // 5 years, for example\n\nconst claimerSignature = domainLinkageCredential.request.claimerSignature\n\nconst proof = {\n  type: 'KILTSelfSigned2020',\n  proofPurpose: 'assertionMethod',\n  verificationMethod: claimerSignature.keyUri,\n  signature: claimerSignature.signature,\n  challenge: claimerSignature.challenge,\n}\n\nreturn {\n  '@context': [\n    'https://www.w3.org/2018/credentials/v1',\n    'https://identity.foundation/.well-known/did-configuration/v1',\n  ],\n  issuer,\n  issuanceDate,\n  expirationDate,\n  type: [\n    'VerifiableCredential',\n    'DomainLinkageCredential',\n    'KiltCredential2020',\n  ],\n  credentialSubject,\n  proof,\n}\n")))}p.isMDXComponent=!0}}]);