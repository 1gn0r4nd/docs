"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[364],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return m}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var c=r.createContext({}),l=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},u=function(e){var t=l(e.components);return r.createElement(c.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},p=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,c=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),p=l(n),m=a,f=p["".concat(c,".").concat(m)]||p[m]||d[m]||i;return n?r.createElement(f,s(s({ref:t},u),{},{components:n})):r.createElement(f,s({ref:t},u))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,s=new Array(i);s[0]=p;var o={};for(var c in t)hasOwnProperty.call(t,c)&&(o[c]=t[c]);o.originalType=e,o.mdxType="string"==typeof e?e:a,s[1]=o;for(var l=2;l<i;l++)s[l]=n[l];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}p.displayName="MDXCreateElement"},8946:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return o},contentTitle:function(){return c},metadata:function(){return l},toc:function(){return u},default:function(){return p}});var r=n(3117),a=n(102),i=(n(7294),n(3905)),s=["components"],o={id:"attesting",title:"Attesting"},c=void 0,l={unversionedId:"sdk/core-feature/attesting",id:"sdk/core-feature/attesting",title:"Attesting",description:"There are three actors in the KILT workflow: Claimers, Attesters and Verifiers.",source:"@site/docs/sdk/0-core-feature/4_attesting.md",sourceDirName:"sdk/0-core-feature",slug:"/sdk/core-feature/attesting",permalink:"/docs/sdk/core-feature/attesting",editUrl:"https://github.com/KILTprotocol/docs/edit/master/docs/sdk/0-core-feature/4_attesting.md",tags:[],version:"current",sidebarPosition:4,frontMatter:{id:"attesting",title:"Attesting"},sidebar:"sdk",previous:{title:"Requesting Terms and Attestations",permalink:"/docs/sdk/core-feature/requesting-terms-and-attestations"},next:{title:"Verification",permalink:"/docs/sdk/core-feature/verification"}},u=[],d={toc:u};function p(e){var t=e.components,n=(0,a.Z)(e,s);return(0,i.kt)("wrapper",(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"There are three actors in the KILT workflow: Claimers, Attesters and Verifiers."),(0,i.kt)("p",null,"To create an attestation, the attester first receives a message with a ",(0,i.kt)("inlineCode",{parentName:"p"},"RequestForAttestation")," object from the claimer."),(0,i.kt)("p",null,"The attester then decrypts the message and the KILT SDK automatically checks the validity of the encrypted content, ensuring that:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"the hash of the encrypted object matches the concatenation of the message, nonce (number that is used once) and date of creation fields of the encrypted object"),(0,i.kt)("li",{parentName:"ul"},"the address of the sender matches the signature of the encrypted message")),(0,i.kt)("p",null,"These ensure that the sender of the message is the owner of the encapsulated claim."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"const decryptedMessage = Kilt.Message.decrypt(encryptedMessage, identity);\n")),(0,i.kt)("p",null,"There are several steps to creating the attestation. The attester:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"manually verifies the data inside the claim by checking that all the data fields matching the requirements of the attestation"),(0,i.kt)("li",{parentName:"ul"},"creates an attestation object from the extracted RequestForAttestation and the attester\u2019s address."),(0,i.kt)("li",{parentName:"ul"},"stores the attestation hash on the chain by preparing an unsigned transaction and then submitting it with the attester\u2019s signature.")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"const attestation = Kilt.Attestation.fromRequestAndPublicIdentity(\n  requestForAttestation,\n  publicIdentity\n);\n\ntransaction = await attestation.store();\n\nawait Kilt.BlockchainUtils.submitSignedTx(transaction, {\n  resolveOn: Kilt.BlockchainUtils.IS_IN_BLOCK,\n});\n")),(0,i.kt)("p",null,"Once this is done, the attester:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"creates an ",(0,i.kt)("inlineCode",{parentName:"li"},"AttestedClaim")," object from the ",(0,i.kt)("inlineCode",{parentName:"li"},"RequestForAttestation")," and the attestation objects"),(0,i.kt)("li",{parentName:"ul"},"encrypts the ",(0,i.kt)("inlineCode",{parentName:"li"},"AttestedClaim")," object"),(0,i.kt)("li",{parentName:"ul"},"sends the encrypted ",(0,i.kt)("inlineCode",{parentName:"li"},"AttestedClaim")," object back to the claimer.")),(0,i.kt)("p",null,"The claimer then stores the attestation in their own wallet and can use it as they wish."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"const attestedClaim = Kilt.AttestedClaim.fromRequestAndAttestation(\n  requestForAttestation,\n  attestation\n);\n")))}p.isMDXComponent=!0}}]);