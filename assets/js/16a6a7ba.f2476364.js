"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[615],{273:function(e,t,i){i.r(t),i.d(t,{assets:function(){return l},contentTitle:function(){return r},default:function(){return h},frontMatter:function(){return s},metadata:function(){return d},toc:function(){return c}});var n=i(83117),o=(i(67294),i(3905)),a=i(90814);const s={id:"light-did-creation",title:"Create a Light DID"},r=void 0,d={unversionedId:"develop/sdk/cookbook/dids/light-did-creation",id:"develop/sdk/cookbook/dids/light-did-creation",title:"Create a Light DID",description:"The creation of a light DID require a keystore instance that conforms to the Keystore interface.",source:"@site/docs/develop/01_sdk/02_cookbook/01_dids/01_light_did_creation.md",sourceDirName:"develop/01_sdk/02_cookbook/01_dids",slug:"/develop/sdk/cookbook/dids/light-did-creation",permalink:"/docs/develop/sdk/cookbook/dids/light-did-creation",draft:!1,editUrl:"https://github.com/KILTprotocol/docs/edit/master/docs/develop/01_sdk/02_cookbook/01_dids/01_light_did_creation.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{id:"light-did-creation",title:"Create a Light DID"},sidebar:"sdk",previous:{title:"Quickstart",permalink:"/docs/develop/sdk/quickstart"},next:{title:"Create a Full DID",permalink:"/docs/develop/sdk/cookbook/dids/full-did-creation"}},l={},c=[],p={toc:c};function h(e){let{components:t,...i}=e;return(0,o.kt)("wrapper",(0,n.Z)({},p,i,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"The creation of a light DID require a keystore instance that conforms to the ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/KILTprotocol/sdk-js/blob/master/packages/types/src/Keystore.ts"},"Keystore interface"),".\nFor the sake of ease of use, the SDK provides a ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/KILTprotocol/sdk-js/blob/master/packages/did/src/DemoKeystore/DemoKeystore.ts"},"demo keystore")," which can be used to generate key pairs that are kept in memory and disappear at the end of the program execution."),(0,o.kt)("admonition",{type:"warning"},(0,o.kt)("p",{parentName:"admonition"},"Using the demo keystore in production is highly discouraged as all the keys are kept in the memory and easily retrievable by malicious actors.")),(0,o.kt)("p",null,"The following is an example of how to create a light DID after creating an instance of the demo keystore."),(0,o.kt)(a.Z,{className:"language-ts",mdxType:"CodeBlock"},"import * as Kilt from '@kiltprotocol/sdk-js'\n\nexport async function createSimpleLightDid(\n  keystore: Kilt.Did.DemoKeystore,\n  authenticationSeed: string | undefined = undefined\n): Promise<Kilt.Did.LightDidDetails> {\n  // Ask the keystore to generate a new keypair to use for authentication with the generated seed.\n  // If no `authenticationSeed` is provided, a random one will be generated.\n  const authenticationKeyPublicDetails = await keystore.generateKeypair({\n    alg: Kilt.Did.SigningAlgorithms.Ed25519,\n    seed: authenticationSeed\n  })\n\n  // Create a light DID from the generated authentication key.\n  const lightDID = Kilt.Did.LightDidDetails.fromDetails({\n    authenticationKey: {\n      publicKey: authenticationKeyPublicDetails.publicKey,\n      type: Kilt.VerificationKeyType.Ed25519\n    }\n  })\n  console.log(lightDID.uri)\n\n  return lightDID\n}\n"),(0,o.kt)("p",null,"For cases in which also an encryption key and some service endpoints need to be added to a light DID:"),(0,o.kt)(a.Z,{className:"language-ts",mdxType:"CodeBlock"},"import * as Kilt from '@kiltprotocol/sdk-js'\n\nexport async function createCompleteLightDid(\n  keystore: Kilt.Did.DemoKeystore,\n  authenticationSeed: string | undefined = undefined\n): Promise<Kilt.Did.LightDidDetails> {\n  const authenticationKeyPublicDetails = await keystore.generateKeypair({\n    alg: Kilt.Did.SigningAlgorithms.Ed25519,\n    seed: authenticationSeed\n  })\n\n  // Generate the seed for the encryption key.\n  const encryptionSeed = '0x987654321'\n\n  // Use the keystore to generate a new keypair to use for encryption.\n  const encryptionKeyPublicDetails = await keystore.generateKeypair({\n    alg: Kilt.Did.EncryptionAlgorithms.NaclBox,\n    seed: encryptionSeed\n  })\n\n  const serviceEndpoints: Kilt.DidServiceEndpoint[] = [\n    {\n      id: 'my-service',\n      types: ['KiltPublishedCredentialCollectionV1'],\n      urls: ['http://example.domain.org']\n    }\n  ]\n\n  // Create the KILT light DID with the information generated.\n  const lightDID = Kilt.Did.LightDidDetails.fromDetails({\n    authenticationKey: {\n      publicKey: authenticationKeyPublicDetails.publicKey,\n      type: Kilt.VerificationKeyType.Ed25519\n    },\n    encryptionKey: {\n      publicKey: encryptionKeyPublicDetails.publicKey,\n      type: Kilt.EncryptionKeyType.X25519\n    },\n    serviceEndpoints\n  })\n  console.log(lightDID.uri)\n\n  return lightDID\n}\n"),(0,o.kt)("admonition",{type:"info"},(0,o.kt)("p",{parentName:"admonition"},"In KILT, light DIDs are meant to be used in one of two cases:"),(0,o.kt)("ol",{parentName:"admonition"},(0,o.kt)("li",{parentName:"ol"},"As ",(0,o.kt)("em",{parentName:"li"},"ephemeral, one-time identifiers")," when establishing new communication channels with untrusted parties."),(0,o.kt)("li",{parentName:"ol"},"As an ",(0,o.kt)("em",{parentName:"li"},"entrypoint into the KILT ecosystem"),", i.e., to obtain the first Credentials and getting acquainted with KILT.")),(0,o.kt)("p",{parentName:"admonition"},"As such, light DIDs do not support updates of any sort, but they retain the same identifier until they are upgraded to full DIDs.\nThey are not supposed to be used in complex and/or high-security use cases.\nFor those, a full DID should be used.\nYou can visit the ",(0,o.kt)("a",{parentName:"p",href:"/docs/develop/sdk/cookbook/dids/full-did-creation"},"next section")," to see how to create and manage full DIDs.")))}h.isMDXComponent=!0}}]);