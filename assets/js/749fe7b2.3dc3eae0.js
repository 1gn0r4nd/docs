"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[9096],{40661:function(e,t,i){i.r(t),i.d(t,{assets:function(){return r},contentTitle:function(){return l},default:function(){return p},frontMatter:function(){return s},metadata:function(){return a},toc:function(){return c}});var n=i(83117),o=(i(67294),i(3905)),d=i(90814);const s={id:"full-did-delete",title:"Delete a Full DID"},l=void 0,a={unversionedId:"develop/sdk/cookbook/dids/full-did-delete",id:"develop/sdk/cookbook/dids/full-did-delete",title:"Delete a Full DID",description:"Once not needed anymore, it is recommended to remove the DID details from the KILT blockchain.",source:"@site/docs/develop/01_sdk/02_cookbook/01_dids/06_full_did_delete.md",sourceDirName:"develop/01_sdk/02_cookbook/01_dids",slug:"/develop/sdk/cookbook/dids/full-did-delete",permalink:"/docs/develop/sdk/cookbook/dids/full-did-delete",draft:!1,editUrl:"https://github.com/KILTprotocol/docs/edit/master/docs/develop/01_sdk/02_cookbook/01_dids/06_full_did_delete.md",tags:[],version:"current",sidebarPosition:6,frontMatter:{id:"full-did-delete",title:"Delete a Full DID"},sidebar:"sdk",previous:{title:"Generate and Verify a DID Signature",permalink:"/docs/develop/sdk/cookbook/dids/did-signature"},next:{title:"Claim a web3name",permalink:"/docs/develop/sdk/cookbook/web3names/web3name-claim"}},r={},c=[{value:"Claim back a DID deposit",id:"claim-back-a-did-deposit",level:2}],u={toc:c};function p(e){let{components:t,...i}=e;return(0,o.kt)("wrapper",(0,n.Z)({},u,i,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"Once not needed anymore, it is recommended to remove the DID details from the KILT blockchain.\nThe following snippet shows how to do it:"),(0,o.kt)(d.Z,{className:"language-ts",mdxType:"CodeBlock"},"import type { KeyringPair } from '@polkadot/keyring/types'\n\nimport * as Kilt from '@kiltprotocol/sdk-js'\n\nexport async function deleteFullDid(\n  keystore: Kilt.Did.DemoKeystore,\n  submitterAccount: KeyringPair,\n  fullDid: Kilt.Did.FullDidDetails,\n  resolveOn: Kilt.SubscriptionPromise.ResultEvaluator = Kilt.BlockchainUtils\n    .IS_FINALIZED\n): Promise<void> {\n  // Create a DID deletion operation. We specify the number of endpoints currently stored under the DID because\n  // of the upper computation limit required by the blockchain runtime.\n  const endpointsCountForDid = await Kilt.Did.Chain.queryEndpointsCounts(\n    fullDid.identifier\n  )\n  const didDeletionExtrinsic = await Kilt.Did.Chain.getDeleteDidExtrinsic(\n    endpointsCountForDid\n  )\n\n  // Sign the DID deletion operation using the DID authentication key.\n  // This results in an unsigned extrinsic that can be then signed and submitted to the KILT blockchain by the account\n  // authorized in this operation, Alice in this case.\n  const didSignedDeletionExtrinsic = await fullDid.authorizeExtrinsic(\n    didDeletionExtrinsic,\n    keystore,\n    submitterAccount.address\n  )\n\n  await Kilt.BlockchainUtils.signAndSubmitTx(\n    didSignedDeletionExtrinsic,\n    submitterAccount,\n    {\n      resolveOn\n    }\n  )\n}\n"),(0,o.kt)("admonition",{type:"warning"},(0,o.kt)("p",{parentName:"admonition"},"Please note that once deleted, a full DID becomes unusable and cannot be created anymore, meaning that all Credentials obtained with that DID must be re-obtained with a different one if needed.")),(0,o.kt)("h2",{id:"claim-back-a-did-deposit"},"Claim back a DID deposit"),(0,o.kt)("p",null,"Claiming back the deposit of a DID is semantically equivalent to deleting the DID, with the difference that the extrinsic to claim the deposit can only be called by the deposit owner and does not require any interaction with the DID subject:"),(0,o.kt)(d.Z,{className:"language-ts",mdxType:"CodeBlock"},"import type { KeyringPair } from '@polkadot/keyring/types'\n\nimport * as Kilt from '@kiltprotocol/sdk-js'\n\nexport async function reclaimFullDidDeposit(\n  depositPayerAccount: KeyringPair,\n  didIdentifier: Kilt.DidIdentifier,\n  resolveOn: Kilt.SubscriptionPromise.ResultEvaluator = Kilt.BlockchainUtils\n    .IS_FINALIZED\n): Promise<void> {\n  // Generate the submittable extrinsic to claim the deposit back.\n  // It includes the DID identifier for which the deposit needs to be returned\n  // and the count of service endpoints to provide an upper bound to the computation of the extrinsic execution.\n  const endpointsCountForDid = await Kilt.Did.Chain.queryEndpointsCounts(\n    didIdentifier\n  )\n  const depositClaimExtrinsic = await Kilt.Did.Chain.getReclaimDepositExtrinsic(\n    didIdentifier,\n    endpointsCountForDid\n  )\n\n  // The submission will fail if `depositPayerAccount` is not the owner of the deposit associated with the given DID identifier.\n  await Kilt.BlockchainUtils.signAndSubmitTx(\n    depositClaimExtrinsic,\n    depositPayerAccount,\n    {\n      resolveOn\n    }\n  )\n}\n"))}p.isMDXComponent=!0}}]);