"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[9430],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return h}});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),c=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},u=function(e){var t=c(e.components);return a.createElement(s.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),d=c(n),h=r,m=d["".concat(s,".").concat(h)]||d[h]||p[h]||i;return n?a.createElement(m,o(o({ref:t},u),{},{components:n})):a.createElement(m,o({ref:t},u))}));function h(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=d;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:r,o[1]=l;for(var c=2;c<i;c++)o[c]=n[c];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},58215:function(e,t,n){var a=n(67294);t.Z=function(e){var t=e.children,n=e.hidden,r=e.className;return a.createElement("div",{role:"tabpanel",hidden:n,className:r},t)}},9877:function(e,t,n){n.d(t,{Z:function(){return u}});var a=n(83117),r=n(67294),i=n(72389),o=n(24726),l=n(86010),s="tabItem_LplD";function c(e){var t,n,i,c=e.lazy,u=e.block,p=e.defaultValue,d=e.values,h=e.groupId,m=e.className,f=r.Children.map(e.children,(function(e){if((0,r.isValidElement)(e)&&void 0!==e.props.value)return e;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof e.type?e.type:e.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})),k=null!=d?d:f.map((function(e){var t=e.props;return{value:t.value,label:t.label,attributes:t.attributes}})),v=(0,o.lx)(k,(function(e,t){return e.value===t.value}));if(v.length>0)throw new Error('Docusaurus error: Duplicate values "'+v.map((function(e){return e.value})).join(", ")+'" found in <Tabs>. Every value needs to be unique.');var b=null===p?p:null!=(t=null!=p?p:null==(n=f.find((function(e){return e.props.default})))?void 0:n.props.value)?t:null==(i=f[0])?void 0:i.props.value;if(null!==b&&!k.some((function(e){return e.value===b})))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+b+'" but none of its children has the corresponding value. Available values are: '+k.map((function(e){return e.value})).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");var g=(0,o.UB)(),y=g.tabGroupChoices,w=g.setTabGroupChoices,N=(0,r.useState)(b),x=N[0],T=N[1],S=[],I=(0,o.o5)().blockElementScrollPositionUntilNextRender;if(null!=h){var E=y[h];null!=E&&E!==x&&k.some((function(e){return e.value===E}))&&T(E)}var C=function(e){var t=e.currentTarget,n=S.indexOf(t),a=k[n].value;a!==x&&(I(t),T(a),null!=h&&w(h,a))},P=function(e){var t,n=null;switch(e.key){case"ArrowRight":var a=S.indexOf(e.currentTarget)+1;n=S[a]||S[0];break;case"ArrowLeft":var r=S.indexOf(e.currentTarget)-1;n=S[r]||S[S.length-1]}null==(t=n)||t.focus()};return r.createElement("div",{className:"tabs-container"},r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,l.Z)("tabs",{"tabs--block":u},m)},k.map((function(e){var t=e.value,n=e.label,i=e.attributes;return r.createElement("li",(0,a.Z)({role:"tab",tabIndex:x===t?0:-1,"aria-selected":x===t,key:t,ref:function(e){return S.push(e)},onKeyDown:P,onFocus:C,onClick:C},i,{className:(0,l.Z)("tabs__item",s,null==i?void 0:i.className,{"tabs__item--active":x===t})}),null!=n?n:t)}))),c?(0,r.cloneElement)(f.filter((function(e){return e.props.value===x}))[0],{className:"margin-vert--md"}):r.createElement("div",{className:"margin-vert--md"},f.map((function(e,t){return(0,r.cloneElement)(e,{key:t,hidden:e.props.value!==x})}))))}function u(e){var t=(0,i.Z)();return r.createElement(c,(0,a.Z)({key:String(t)},e))}},4621:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return c},contentTitle:function(){return u},metadata:function(){return p},toc:function(){return d},default:function(){return m}});var a=n(83117),r=n(80102),i=(n(67294),n(3905)),o=n(9877),l=n(58215),s=["components"],c={id:"fullnode-setup",title:"Set Up a KILT Full Node"},u=void 0,p={unversionedId:"develop/chain/fullnode-setup",id:"develop/chain/fullnode-setup",title:"Set Up a KILT Full Node",description:"We will guide you through the process of setting up and connecting to a KILT full node.",source:"@site/docs/develop/02_chain/04_fullnode.md",sourceDirName:"develop/02_chain",slug:"/develop/chain/fullnode-setup",permalink:"/docs/develop/chain/fullnode-setup",editUrl:"https://github.com/KILTprotocol/docs/edit/master/docs/develop/02_chain/04_fullnode.md",tags:[],version:"current",sidebarPosition:4,frontMatter:{id:"fullnode-setup",title:"Set Up a KILT Full Node"},sidebar:"chain",previous:{title:"Deployments and Services",permalink:"/docs/develop/chain/deployments"}},d=[{value:"Setup",id:"setup",children:[{value:"WASM Runtime Execution",id:"wasm-runtime-execution",children:[],level:3},{value:"Specify the Right Chainspec",id:"specify-the-right-chainspec",children:[],level:3},{value:"Specify the Blockchain Storage Path",id:"specify-the-blockchain-storage-path",children:[],level:3}],level:2},{value:"Join the Network",id:"join-the-network",children:[{value:"Build the Full Node",id:"build-the-full-node",children:[],level:3},{value:"Run an Archive Node",id:"run-an-archive-node",children:[],level:3},{value:"Run an Archive Node",id:"run-an-archive-node-1",children:[],level:3}],level:2},{value:"Sync the Blockchain State",id:"sync-the-blockchain-state",children:[],level:2}],h={toc:d};function m(e){var t=e.components,n=(0,r.Z)(e,s);return(0,i.kt)("wrapper",(0,a.Z)({},h,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"We will guide you through the process of setting up and connecting to a KILT full node.\nIn contrast ",(0,i.kt)("a",{parentName:"p",href:"/docs/participate/staking/become_a_collator/setup-node"},"to a Collator"),", full nodes do not author blocks.\nThey act as a backend for websites and help to verify new blocks or validate extrinsics (e.g., coin transfers and other transactions) directly on the network without relying on a centralized infrastructure provider."),(0,i.kt)("h2",{id:"setup"},"Setup"),(0,i.kt)("p",null,"There are currently two different runtimes (i.e., two different parachain environments) that a KILT full node can be part of:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Spiritnet"),": the official public network, which contains only stable and thoroughly-tested features."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Peregrine"),": the public test network whose runtime is as close to that of Spiritnet as possible. It can be used to test applications that use KILT before connecting them to the production Spiritnet chain, which requires tokens that have real monetary value.")),(0,i.kt)("p",null,"Each runtime has its own benchmark measurements."),(0,i.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"info")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"The remainder of this guide will focus on the official ",(0,i.kt)("strong",{parentName:"p"},"Spiritnet"),".\nNevertheless, we recommend to try out the setup on our Peregrine testnet first.\nHence, at each step where it is applicable, we indicate what differs between the Peregrine and Spiritnet configuration for the full node to join either network."))),(0,i.kt)("h3",{id:"wasm-runtime-execution"},"WASM Runtime Execution"),(0,i.kt)("p",null,"A KILT full node should use the ",(0,i.kt)("inlineCode",{parentName:"p"},"--execution=wasm")," parameter for both the relaychain and parachain collation.\nThe alternative to WASM runtime execution is native runtime execution, which might be faster but can, in some cases, deviate from the WASM execution logic and result in a different state.\nWhen this happens, the full node will crash and will stop synchronizing with the network.\nSince the WASM runtime logic is part of the blockchain state itself and hence represents the single source of truth, all nodes should execute the WASM version of the runtime logic."),(0,i.kt)("h3",{id:"specify-the-right-chainspec"},"Specify the Right Chainspec"),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"--chain")," parameter indicates which blockchain the KILT full node will join.\nThis parameter must be specified for both the parachain ",(0,i.kt)("strong",{parentName:"p"},"and")," the relaychain, since both chains are, as a matter of fact, separate blockchains.\nThe KILT parachain accepts an additional parameter to select the environment to use for the WASM runtime execution.\nThis can either be ",(0,i.kt)("inlineCode",{parentName:"p"},"peregrine")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"spiritnet"),"."),(0,i.kt)("p",null,"Hence, to start a full node for the Spiritnet network, the parameter would be ",(0,i.kt)("inlineCode",{parentName:"p"},"--chain=spiritnet"),".\nUnfortunately, there is no hardcoded chain spec for the Peregrine network, so the full path of the chainspec file must be provided ",(0,i.kt)("inlineCode",{parentName:"p"},"--chain=/node/dev-specs/kilt-parachain/peregrine-kilt.json"),".\nPlease refer to the ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/KILTprotocol/kilt-node/blob/develop/dev-specs/kilt-parachain/peregrine-kilt.json"},"KILT node repository")," or the ",(0,i.kt)("a",{parentName:"p",href:"https://hub.docker.com/r/kiltprotocol/kilt-node/tags"},"Docker image")," for more information."),(0,i.kt)("h3",{id:"specify-the-blockchain-storage-path"},"Specify the Blockchain Storage Path"),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"--base-path")," parameter specifies where all the persistent files must be stored.\nBy default, the session keys will also be stored in the ",(0,i.kt)("em",{parentName:"p"},"base path"),", but we recommend to separate them from the other files.\nThis makes sure that the keyfiles are not accidentally lost or published when the blockchain database is either backed up or restored.\nYou can configure where to store the session keys using the ",(0,i.kt)("inlineCode",{parentName:"p"},"--keystore-path")," option.\nSince the Collator will collate only for the parachain, there is no need to add this to the relaychain part of the command."),(0,i.kt)("h2",{id:"join-the-network"},"Join the Network"),(0,i.kt)(o.Z,{groupId:"exec-strategy",defaultValue:"Binary",values:[{label:"Binary",value:"Binary"},{label:"Docker",value:"Docker"}],mdxType:"Tabs"},(0,i.kt)(l.Z,{value:"Binary",mdxType:"TabItem"},(0,i.kt)("h3",{id:"build-the-full-node"},"Build the Full Node"),(0,i.kt)("p",null,"In order to build the KILT full node executable, you need to have a ",(0,i.kt)("a",{parentName:"p",href:"https://www.rust-lang.org/tools/install"},"nightly version of Rust")," and the ",(0,i.kt)("inlineCode",{parentName:"p"},"wasm32-unknown-unknown")," target for this toolchain installed.\nWe recommend to align your nightly version with the one used in the ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/KILTprotocol/kilt-node"},"KILT node repository")," by executing the ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/KILTprotocol/kilt-node/blob/develop/scripts/init.sh"},"init script"),".\nAfter cloning the repository, you can build the executable by running the ",(0,i.kt)("inlineCode",{parentName:"p"},"build")," command below from the root directory."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"# Clone the repository\ngit clone https://github.com/KILTprotocol/kilt-node.git\n# Check out master branch\ngit checkout master\n# Set up the build environment by installing the Rust compiler.\n./scripts/init.sh\n# Build the executable from source enabling all the optimizations with --release.\ncargo build --release -p kilt-parachain\n")),(0,i.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"info")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"You must not use the default ",(0,i.kt)("inlineCode",{parentName:"p"},"develop")," branch to build the executable.\nInstead, the ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/KILTprotocol/kilt-node/releases"},"latest release")," from ",(0,i.kt)("inlineCode",{parentName:"p"},"master")," should be used."))),(0,i.kt)("p",null,"The compiled executable can be found in ",(0,i.kt)("inlineCode",{parentName:"p"},"./target/release/kilt-parachain")," after the build process completes successfully."),(0,i.kt)("h3",{id:"run-an-archive-node"},"Run an Archive Node"),(0,i.kt)("p",null,"To run an Archive full node, add the option ",(0,i.kt)("inlineCode",{parentName:"p"},"--pruning archive")," to the command."),(0,i.kt)(o.Z,{groupId:"runtime",defaultValue:"Spiritnet",values:[{label:"Spiritnet",value:"Spiritnet"},{label:"Peregrine",value:"Peregrine"}],mdxType:"Tabs"},(0,i.kt)(l.Z,{value:"Spiritnet",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},'./target/release/kilt-parachain \\\n  --chain=spiritnet \\\n  --runtime=spiritnet \\\n  --rpc-port=9933 \\\n  --rpc-cors=all \\\n  --rpc-external \\\n  --ws-external \\\n  --name="name of full node" \\\n  --execution=wasm \\\n  --pruning archive \\\n  --state-cache-size=1 \\\n  -- \\\n  --chain=kusama \\\n  --execution=wasm\n'))),(0,i.kt)(l.Z,{value:"Peregrine",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},'./target/release/kilt-parachain \\\n  --chain=/node/dev-specs/kilt-parachain/peregrine-kilt.json \\\n  --runtime=peregrine \\\n  --rpc-port=9933 \\\n  --rpc-cors=all \\\n  --rpc-external \\\n  --ws-external \\\n  --name="name of full node" \\\n  --execution=wasm \\\n  --pruning archive \\\n  --state-cache-size=1 \\\n  -- \\\n  --chain=/node/dev-specs/kilt-parachain/peregrine-relay.json \\\n  --execution=wasm\n'))))),(0,i.kt)(l.Z,{value:"Docker",mdxType:"TabItem"},(0,i.kt)("h3",{id:"run-an-archive-node-1"},"Run an Archive Node"),(0,i.kt)("p",null,"The full node can also be started as a Docker container.\nTo expose the websockets ensure that the ",(0,i.kt)("inlineCode",{parentName:"p"},"--rpc-external")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"--ws-external")," flags are set."),(0,i.kt)("p",null,"To run an Archive full node add the option ",(0,i.kt)("inlineCode",{parentName:"p"},"--pruning archive")," to the command."),(0,i.kt)("p",null,"First, you can fetch the latest pre-built image:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"docker pull kiltprotocol/kilt-node:latest\n")),(0,i.kt)("p",null,"Once you have the image, you can spin up the container.\nMake sure to choose whether you want to start a full node for Peregrine or Spiritnet by selecting the correct runtime and chain."),(0,i.kt)(o.Z,{groupId:"runtime",defaultValue:"Spiritnet",values:[{label:"Spiritnet",value:"Spiritnet"},{label:"Peregrine",value:"Peregrine"}],mdxType:"Tabs"},(0,i.kt)(l.Z,{value:"Spiritnet",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},'docker run -v kilt-node-data:/data kiltprotocol/kilt-node:latest \\\n  --base-path=/data/para \\\n  --chain=spiritnet \\\n  --runtime=spiritnet \\\n  --rpc-port=9933 \\\n  --rpc-cors=all \\\n  --rpc-external \\\n  --ws-external \\\n  --name="name of full node" \\\n  --execution=wasm \\\n  --pruning archive \\\n  --state-cache-size=1 \\\n  -- \\\n  --base-path=/data/relay \\\n  --chain=kusama \\\n  --execution=wasm\n'))),(0,i.kt)(l.Z,{value:"Peregrine",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},'docker run -v kilt-node-data:/data kiltprotocol/kilt-node:latest \\\n  --base-path=/data/para \\\n  --chain=/node/dev-specs/kilt-parachain/peregrine-kilt.json \\\n  --runtime=peregrine \\\n  --rpc-port=9933 \\\n  --rpc-cors=all \\\n  --rpc-external \\\n  --ws-external \\\n  --name="name of full node" \\\n  --execution=wasm \\\n  --pruning archive \\\n  --state-cache-size=1 \\\n  -- \\\n  --base-path=/data/relay \\\n  --chain=/node/dev-specs/kilt-parachain/peregrine-relay.json \\\n  --execution=wasm\n')))))),(0,i.kt)("h2",{id:"sync-the-blockchain-state"},"Sync the Blockchain State"),(0,i.kt)("p",null,"Once started, the full node needs to fully sync up with both the parachain and the relaychain states.\nDepending on the size of both blockchain states and the node hardware specs, it may take from a number of hours to few days for the node to fully synchronize.\nMore details can be found in the ",(0,i.kt)("a",{parentName:"p",href:"https://wiki.polkadot.network/docs/maintain-guides-how-to-validate-kusama#synchronize-chain-data"},"Polkadot network documentation"),"."),(0,i.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"Example of node sync")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("pre",{parentName:"div"},(0,i.kt)("code",{parentName:"pre",className:"language-Example",metastring:"of node sync",of:!0,node:!0,sync:!0},"2021-06-17 02:34:34 \ud83d\udd0d Discovered new external address for our node: /ip4/100.102.231.64/tcp/30333/ws/p2p/12D3KooWLE7ivpuXJQpFVP4fuuutAqEsk8nrNEpuR3tddqnXgLPB\n2021-06-17 02:34:36 \u2699\ufe0f  Syncing 409.2 bps, target=#8062689 (5 peers), best: #3477 (0x63ad\u2026e046), finalized #3072 (0x0e4c\u2026f587), \u2b07 153.2kiB/s \u2b06 12.9kiB/s\n2021-06-17 02:34:37 \ud83d\udd0d Discovered new external address for our node: /ip4/100.111.175.0/tcp/30333/ws/p2p/12D3KooWLE7ivpuXJQpFVP4fuuutAqEsk8nrNEpuR3tddqnXgLPB\n2021-06-17 02:34:38 \ud83d\udd0d Discovered new external address for our node: /ip4/100.100.176.0/tcp/30333/ws/p2p/12D3KooWLE7ivpuXJQpFVP4fuuutAqEsk8nrNEpuR3tddqnXgLPB\n2021-06-17 02:34:41 \u2699\ufe0f  Syncing 386.2 bps, target=#8062690 (7 peers), best: #5409 (0x1d76\u20268c3d), finalized #5121 (0x8ad1\u2026b6dc), \u2b07 96.1kiB/s \u2b06 10.9kiB/s\n2021-06-17 02:34:46 \u2699\ufe0f  Syncing 394.8 bps, target=#8062691 (11 peers), best: #7383 (0x0689\u20266f1e), finalized #7168 (0x72a9\u20268d8c), \u2b07 352.9kiB/s \u2b06 5.1kiB/s\n2021-06-17 02:34:51 \u2699\ufe0f  Syncing 347.0 bps, target=#8062692 (12 peers), best: #9118 (0x66fc\u2026cce3), finalized #8704 (0x14c9\u2026705e), \u2b07 62.7kiB/s \u2b06 1.7kiB/s\n")))))}m.isMDXComponent=!0}}]);