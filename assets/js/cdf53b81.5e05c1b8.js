"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[487],{8504:function(e,n,t){t.r(n),t.d(n,{contentTitle:function(){return c},default:function(){return p},frontMatter:function(){return l},metadata:function(){return m},toc:function(){return u}});var i=t(3117),o=t(102),a=(t(7294),t(3905)),r=t(1736),s=["components"],l={id:"web3names",title:"Web3 names"},c=void 0,m={unversionedId:"sdk/core-feature/web3names",id:"sdk/core-feature/web3names",title:"Web3 names",description:"Web3 names are user-friendly aliases for a KILT DID.",source:"@site/docs/sdk/0-core-feature/1_web3names.md",sourceDirName:"sdk/0-core-feature",slug:"/sdk/core-feature/web3names",permalink:"/docs/sdk/core-feature/web3names",editUrl:"https://github.com/KILTprotocol/docs/edit/master/docs/sdk/0-core-feature/1_web3names.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{id:"web3names",title:"Web3 names"},sidebar:"sdk",previous:{title:"Kilt DIDs",permalink:"/docs/sdk/core-feature/did"},next:{title:"CTypes",permalink:"/docs/sdk/core-feature/ctypes"}},u=[{value:"Claiming a Web3 name",id:"claiming-a-web3-name",children:[],level:2},{value:"Releasing a Web3 name",id:"releasing-a-web3-name",children:[],level:2},{value:"DIDs, Web3 names, and account linking",id:"dids-web3-names-and-account-linking",children:[{value:"Link accounts to DIDs and Web3 names",id:"link-accounts-to-dids-and-web3-names",children:[],level:3},{value:"Query the Web3 name for an account",id:"query-the-web3-name-for-an-account",children:[],level:3},{value:"Unlink an account from its DID and viceversa",id:"unlink-an-account-from-its-did-and-viceversa",children:[],level:3}],level:2}],d={toc:u};function p(e){var n=e.components,t=(0,o.Z)(e,s);return(0,a.kt)("wrapper",(0,i.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"Web3 names are user-friendly aliases for a KILT DID.\nThey serve the same purpose that domain names do for IP addresses: who knows the IP address under the ",(0,a.kt)("inlineCode",{parentName:"p"},"kilt.io")," domain name? \ud83e\udd37\ud83c\udffd\u200d\u2640\ufe0f"),(0,a.kt)("p",null,'Each Web3 name is globally unique within the KILT space, and is composed of a sequence of a minimum of 3 to a maximum of 32 characters taken from a specific character set to enhance human redability and reduce the chances of "two Web3 names looking the same, despite being different".\nThe character set include only:'),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("em",{parentName:"li"},"lowercase letters"),", from ",(0,a.kt)("inlineCode",{parentName:"li"},"a")," to ",(0,a.kt)("inlineCode",{parentName:"li"},"z")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("em",{parentName:"li"},"digits")," from ",(0,a.kt)("inlineCode",{parentName:"li"},"0")," to ",(0,a.kt)("inlineCode",{parentName:"li"},"9")),(0,a.kt)("li",{parentName:"ul"},"the symbols ",(0,a.kt)("inlineCode",{parentName:"li"},"-")," and ",(0,a.kt)("inlineCode",{parentName:"li"},"_"))),(0,a.kt)("p",null,"A regex that would match all and only the allowed Web3 names would be the following:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"^[a-z0-9\\_\\-]{3,32}$\n")),(0,a.kt)("p",null,"In the global URI space, Web3 names are prefixed with the ",(0,a.kt)("inlineCode",{parentName:"p"},"w3n:")," URI namespace.\nFor example, the full URI for the Web3 name ",(0,a.kt)("inlineCode",{parentName:"p"},"example-web3name")," would be ",(0,a.kt)("inlineCode",{parentName:"p"},"w3n:example-web3name"),"."),(0,a.kt)("h2",{id:"claiming-a-web3-name"},"Claiming a Web3 name"),(0,a.kt)("p",null,"A Web3 name can be claimed if it has currently no owner, using the following snippet as reference."),(0,a.kt)(r.Z,{className:"language-js",mdxType:"CodeBlock"},"import { KeyringPair } from '@kiltprotocol/types'\n\nimport { DemoKeystore, FullDidDetails, Web3Names } from '@kiltprotocol/did'\nimport { BlockchainUtils } from '@kiltprotocol/chain-helpers'\nimport { SubscriptionPromise } from '@kiltprotocol/types'\n\nexport async function main(\n  keystore: DemoKeystore,\n  didOwner: FullDidDetails,\n  kiltAccount: KeyringPair,\n  web3Name: Web3Names.Web3Name,\n  resolveOn: SubscriptionPromise.ResultEvaluator = BlockchainUtils.IS_FINALIZED\n) {\n  const web3NameClaimTx = await Web3Names.getClaimTx(web3Name).then((tx) =>\n    didOwner.authorizeExtrinsic(tx, keystore, kiltAccount.address)\n  )\n  await BlockchainUtils.signAndSubmitTx(web3NameClaimTx, kiltAccount, {\n    reSign: true,\n    resolveOn\n  })\n}\n"),(0,a.kt)("p",null,"The claiming process requires the reservation of a deposit that is freed upon Web3 name release."),(0,a.kt)("p",null,"Once claimed, the Web3 name will start appearing whenever the DID of its owner is resolved, for instance via the ",(0,a.kt)("a",{parentName:"p",href:"https://dev.uniresolver.io/#did:kilt:4pZGzLSybfMsxB1DcpFNYmnqFv5QihbFb1zuSuuATqjRQv2g"},"Universal Resolver"),". For more information about Web3 names and DIDs, please refer to the official ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/KILTprotocol/kilt-did-driver/blob/master/docs/did-spec/spec.md"},"KILT DID Specification"),"."),(0,a.kt)("h2",{id:"releasing-a-web3-name"},"Releasing a Web3 name"),(0,a.kt)("p",null,"Whenever the Web3 name is not needed anymore, either the DID owner or the deposit payer can release it, with the previously reserved deposit going back to the original payer."),(0,a.kt)("p",null,"In the case of the DID owner willing to release the Web3 name, the following snippet provides a reference implementation on how to achieve that."),(0,a.kt)(r.Z,{className:"language-js",mdxType:"CodeBlock"},"import { DemoKeystore, FullDidDetails, Web3Names } from '@kiltprotocol/did'\nimport { BlockchainUtils } from '@kiltprotocol/chain-helpers'\nimport { KeyringPair } from '@kiltprotocol/types'\nimport { SubscriptionPromise } from '@kiltprotocol/types'\n\nexport async function main(\n  keystore: DemoKeystore,\n  didOwner: FullDidDetails,\n  kiltAccount: KeyringPair,\n  resolveOn: SubscriptionPromise.ResultEvaluator = BlockchainUtils.IS_FINALIZED\n) {\n  const web3NameReleaseTx = await Web3Names.getReleaseByOwnerTx().then((tx) =>\n    didOwner.authorizeExtrinsic(tx, keystore, kiltAccount.address)\n  )\n  await BlockchainUtils.signAndSubmitTx(web3NameReleaseTx, kiltAccount, {\n    reSign: true,\n    resolveOn\n  })\n}\n"),(0,a.kt)("p",null,"On the other hand, releasing the Web3 name by the deposit payer does not require the signature of the DID owner, meaning that a regular signed extrinsic can be submitted to the KILT blockchain, as shown below."),(0,a.kt)(r.Z,{className:"language-js",mdxType:"CodeBlock"},"import { BlockchainUtils } from '@kiltprotocol/chain-helpers'\nimport { KeyringPair } from '@kiltprotocol/types'\nimport { SubscriptionPromise } from '@kiltprotocol/types'\nimport { Web3Names } from '@kiltprotocol/did'\n\nexport async function main(\n  kiltAccount: KeyringPair,\n  web3Name: Web3Names.Web3Name,\n  resolveOn: SubscriptionPromise.ResultEvaluator = BlockchainUtils.IS_FINALIZED\n) {\n  // Release the Web3 name by the deposit payer.\n  const web3NameReleaseTx = await Web3Names.getReclaimDepositTx(web3Name)\n  await BlockchainUtils.signAndSubmitTx(web3NameReleaseTx, kiltAccount, {\n    reSign: true,\n    resolveOn\n  })\n}\n"),(0,a.kt)("h2",{id:"dids-web3-names-and-account-linking"},"DIDs, Web3 names, and account linking"),(0,a.kt)("p",null,"There is a one-to-one relationship between DIDs and Web3 names.\nThis means that a KILT DID can be linked to at most one Web3 name, and a Web3 name can be claimed only by one DID."),(0,a.kt)("p",null,"The KILT SDK provides easy-to-use querying functions to perform both operations as shown below."),(0,a.kt)(r.Z,{className:"language-js",mdxType:"CodeBlock"},"import { assert } from 'console'\n\nimport type { IDidDetails } from '@kiltprotocol/types'\nimport { Web3Names } from '@kiltprotocol/did'\n\nexport async function main(\n  web3Name: Web3Names.Web3Name,\n  ownerDid: IDidDetails['did']\n) {\n  console.log(\n    `Querying the blockchain for the Web3 name \"${web3Name}\" and the DID \"${ownerDid}\"...`\n  )\n  // Query the owner of the provided Web3 name\n  const web3NameOwner = await Web3Names.queryDidForWeb3Name(web3Name)\n  // Assert that it is the right owner\n  assert(web3NameOwner === ownerDid)\n\n  // Query the Web3 name of the provided DID\n  const didName = await Web3Names.queryWeb3NameForDid(ownerDid)\n  // Assert that it is the right Web3 name\n  assert(didName === web3Name)\n}\n"),(0,a.kt)("h3",{id:"link-accounts-to-dids-and-web3-names"},"Link accounts to DIDs and Web3 names"),(0,a.kt)("p",null,"Beyond linking a Web3 name, KILT allows DID owners to link multiple accounts under the same DID.\nThese accounts are not specific to the KILT blockchain but can reference any chain within the Kusama ecosystem.\nEach account <-> DID link requires the payment of a small deposit, which is returned whenever the link is removed."),(0,a.kt)("p",null,"For DIDs that have also claimed a Web3 name, the linking feature opens up the way to a host of possibilities, e.g., showing the Web3 name of a collator's account on the ",(0,a.kt)("a",{parentName:"p",href:"https://stakeboard.kilt.io/"},"KILT stakeboard"),"."),(0,a.kt)("p",null,"An account can be linked to a DID in one of two ways:"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"The account to be linked generates a signature over the payload ",(0,a.kt)("inlineCode",{parentName:"li"},"<Bytes>(SubmitterDid, BlockNumberExpiration)</Bytes>"),", which is the default encoding of the PolkadotJS extension:")),(0,a.kt)(r.Z,{className:"language-js",mdxType:"CodeBlock"},"import { u8aToHex } from '@polkadot/util'\n\nimport { AccountLinks, DemoKeystore, FullDidDetails } from '@kiltprotocol/did'\nimport { KeyringPair, SubscriptionPromise } from '@kiltprotocol/types'\nimport { BlockchainUtils } from '@kiltprotocol/chain-helpers'\n\nexport async function main(\n  keystore: DemoKeystore,\n  did: FullDidDetails,\n  submitterAccount: KeyringPair,\n  linkedAccount: KeyringPair,\n  resolveOn: SubscriptionPromise.ResultEvaluator = BlockchainUtils.IS_FINALIZED\n) {\n  // Authorizing the extrinsic with the full DID and including a signature of the linked account\n  // results in the provided account being linked to the DID authorizing the operation.\n  const accountLinkingTx = await AccountLinks.authorizeLinkWithAccount(\n    linkedAccount.address,\n    did.identifier,\n    async (encodingDetails) => u8aToHex(linkedAccount.sign(encodingDetails))\n  ).then((tx) => did.authorizeExtrinsic(tx, keystore, submitterAccount.address))\n\n  await BlockchainUtils.signAndSubmitTx(accountLinkingTx, submitterAccount, {\n    reSign: true,\n    resolveOn\n  })\n}\n"),(0,a.kt)("ol",{start:2},(0,a.kt)("li",{parentName:"ol"},"The account submitting the linking transaction is linked to the DID authorizing such transaction:")),(0,a.kt)(r.Z,{className:"language-js",mdxType:"CodeBlock"},"import { AccountLinks, DemoKeystore, FullDidDetails } from '@kiltprotocol/did'\nimport { BlockchainUtils } from '@kiltprotocol/chain-helpers'\nimport { KeyringPair } from '@kiltprotocol/types'\nimport { SubscriptionPromise } from '@kiltprotocol/types'\n\nexport async function main(\n  keystore: DemoKeystore,\n  did: FullDidDetails,\n  submitterAccount: KeyringPair,\n  resolveOn: SubscriptionPromise.ResultEvaluator = BlockchainUtils.IS_FINALIZED\n) {\n  // Authorizing the extrinsic with the full DID and submitting it with the provided account\n  // results in the submitter's account being linked to the DID authorizing the operation.\n  const accountLinkingTx = await AccountLinks.getAssociateSenderTx().then(\n    (tx) => did.authorizeExtrinsic(tx, keystore, submitterAccount.address)\n  )\n\n  await BlockchainUtils.signAndSubmitTx(accountLinkingTx, submitterAccount, {\n    reSign: true,\n    resolveOn\n  })\n}\n"),(0,a.kt)("h3",{id:"query-the-web3-name-for-an-account"},"Query the Web3 name for an account"),(0,a.kt)("p",null,"Once an account has been linked to a DID, its Web3 name can be retrieved via the SDK:"),(0,a.kt)(r.Z,{className:"language-js",mdxType:"CodeBlock"},"import { AccountLinks } from '@kiltprotocol/did'\nimport { KeyringPair } from '@kiltprotocol/types'\n\nexport async function main(linkedAccount: KeyringPair['address']) {\n  const accountWeb3Name = await AccountLinks.queryWeb3Name(linkedAccount)\n  if (accountWeb3Name) {\n    console.log(\n      `Web3 name for account \"${linkedAccount}\" -> \"${accountWeb3Name}\"`\n    )\n  } else {\n    console.log(`Account \"${linkedAccount}\" does not have a linked Web3 name.`)\n  }\n}\n"),(0,a.kt)("h3",{id:"unlink-an-account-from-its-did-and-viceversa"},"Unlink an account from its DID and viceversa"),(0,a.kt)("p",null,"Similarly to how a new account <-> DID link is created, removing a link can happen in one of two ways:"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"The DID owner submits a transaction indicating which account to unlink:")),(0,a.kt)(r.Z,{className:"language-js",mdxType:"CodeBlock"},"import { AccountLinks, DemoKeystore, FullDidDetails } from '@kiltprotocol/did'\nimport { BlockchainUtils } from '@kiltprotocol/chain-helpers'\nimport { KeyringPair } from '@kiltprotocol/types'\nimport { SubscriptionPromise } from '@kiltprotocol/types'\n\nexport async function main(\n  keystore: DemoKeystore,\n  did: FullDidDetails,\n  submitterAccount: KeyringPair,\n  linkedAccount: KeyringPair['address'],\n  resolveOn: SubscriptionPromise.ResultEvaluator = BlockchainUtils.IS_FINALIZED\n) {\n  // The DID owner removes the link between itself and the specified account.\n  const accountUnlinkTx = await AccountLinks.getLinkRemovalByDidTx(\n    linkedAccount\n  ).then((tx) => did.authorizeExtrinsic(tx, keystore, submitterAccount.address))\n\n  await BlockchainUtils.signAndSubmitTx(accountUnlinkTx, submitterAccount, {\n    reSign: true,\n    resolveOn\n  })\n}\n"),(0,a.kt)("ol",{start:2},(0,a.kt)("li",{parentName:"ol"},"The linked account submits a transaction indicating that the link with the DID should be removed:")),(0,a.kt)(r.Z,{className:"language-js",mdxType:"CodeBlock"},"import { AccountLinks } from '@kiltprotocol/did'\nimport { BlockchainUtils } from '@kiltprotocol/chain-helpers'\nimport { KeyringPair } from '@kiltprotocol/types'\nimport { SubscriptionPromise } from '@kiltprotocol/types'\n\nexport async function main(\n  kiltAccount: KeyringPair,\n  resolveOn: SubscriptionPromise.ResultEvaluator = BlockchainUtils.IS_FINALIZED\n) {\n  // The tx does not need to be authorized by a DID, but the submitter account removes its own link.\n  const accountUnlinkTx = await AccountLinks.getLinkRemovalByAccountTx()\n\n  await BlockchainUtils.signAndSubmitTx(accountUnlinkTx, kiltAccount, {\n    reSign: true,\n    resolveOn\n  })\n}\n"))}p.isMDXComponent=!0}}]);