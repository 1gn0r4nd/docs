"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[678],{46907:function(n,t,i){i.r(t),i.d(t,{assets:function(){return l},contentTitle:function(){return s},default:function(){return k},frontMatter:function(){return a},metadata:function(){return r},toc:function(){return u}});var o=i(83117),e=(i(67294),i(3905)),c=i(90814);const a={id:"account-link",title:"Link an Account to a KILT DID"},s=void 0,r={unversionedId:"develop/sdk/cookbook/account_linking/account-link",id:"develop/sdk/cookbook/account_linking/account-link",title:"Link an Account to a KILT DID",description:"An account can be linked to a DID in one of two ways:",source:"@site/docs/develop/01_sdk/02_cookbook/03_account_linking/01_link.md",sourceDirName:"develop/01_sdk/02_cookbook/03_account_linking",slug:"/develop/sdk/cookbook/account_linking/account-link",permalink:"/docs/develop/sdk/cookbook/account_linking/account-link",draft:!1,editUrl:"https://github.com/KILTprotocol/docs/edit/master/docs/develop/01_sdk/02_cookbook/03_account_linking/01_link.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{id:"account-link",title:"Link an Account to a KILT DID"},sidebar:"sdk",previous:{title:"Release a web3name",permalink:"/docs/develop/sdk/cookbook/web3names/web3name-release"},next:{title:"Query the web3name of an Account",permalink:"/docs/develop/sdk/cookbook/account_linking/account-name"}},l={},u=[],d={toc:u};function k(n){let{components:t,...i}=n;return(0,e.kt)("wrapper",(0,o.Z)({},d,i,{components:t,mdxType:"MDXLayout"}),(0,e.kt)("p",null,"An account can be linked to a DID in one of two ways:"),(0,e.kt)("ol",null,(0,e.kt)("li",{parentName:"ol"},"The account to be linked generates a signature over the payload ",(0,e.kt)("inlineCode",{parentName:"li"},"<Bytes>(SubmitterDid, BlockNumberExpiration)</Bytes>"),", which is the default encoding of the PolkadotJS extension:")),(0,e.kt)(c.Z,{className:"language-ts",mdxType:"CodeBlock"},"import type { KeyringPair } from '@polkadot/keyring/types'\n\nimport { u8aToHex } from '@polkadot/util'\n\nimport * as Kilt from '@kiltprotocol/sdk-js'\n\nexport async function linkAccountToDid(\n  keystore: Kilt.Did.DemoKeystore,\n  did: Kilt.Did.FullDidDetails,\n  submitterAccount: KeyringPair,\n  linkedAccount: KeyringPair,\n  resolveOn: Kilt.SubscriptionPromise.ResultEvaluator = Kilt.BlockchainUtils\n    .IS_FINALIZED\n): Promise<void> {\n  // The account to be linked has to sign a specifically-crafted payload to prove\n  // willingness to be linked to the DID.\n  const linkingAccountSignatureGeneration = async (\n    signaturePayload: string | Uint8Array\n  ) => u8aToHex(linkedAccount.sign(signaturePayload))\n\n  // Authorizing the extrinsic with the full DID and including a signature of the linked account\n  // results in the provided account being linked to the DID authorizing the operation.\n  const accountLinkingTx =\n    await Kilt.Did.AccountLinks.getAuthorizeLinkWithAccountExtrinsic(\n      linkedAccount.address,\n      did.identifier,\n      linkingAccountSignatureGeneration\n    ).then((tx) =>\n      did.authorizeExtrinsic(tx, keystore, submitterAccount.address)\n    )\n\n  await Kilt.BlockchainUtils.signAndSubmitTx(\n    accountLinkingTx,\n    submitterAccount,\n    {\n      resolveOn\n    }\n  )\n}\n"),(0,e.kt)("ol",{start:2},(0,e.kt)("li",{parentName:"ol"},"The account submitting the linking transaction is linked to the DID authorizing such transaction:")),(0,e.kt)(c.Z,{className:"language-ts",mdxType:"CodeBlock"},"import type { KeyringPair } from '@polkadot/keyring/types'\n\nimport * as Kilt from '@kiltprotocol/sdk-js'\n\nexport async function linkDidToAccount(\n  keystore: Kilt.Did.DemoKeystore,\n  did: Kilt.Did.FullDidDetails,\n  submitterAccount: KeyringPair,\n  resolveOn: Kilt.SubscriptionPromise.ResultEvaluator = Kilt.BlockchainUtils\n    .IS_FINALIZED\n): Promise<void> {\n  // Authorizing the extrinsic with the full DID and submitting it with the provided account\n  // results in the submitter's account being linked to the DID authorizing the operation.\n  const accountLinkingTx =\n    await Kilt.Did.AccountLinks.getAssociateSenderExtrinsic().then((tx) =>\n      did.authorizeExtrinsic(tx, keystore, submitterAccount.address)\n    )\n\n  await Kilt.BlockchainUtils.signAndSubmitTx(\n    accountLinkingTx,\n    submitterAccount,\n    {\n      resolveOn\n    }\n  )\n}\n"))}k.isMDXComponent=!0}}]);