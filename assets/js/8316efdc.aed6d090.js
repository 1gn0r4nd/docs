"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[219],{6793:function(e,n,t){var i=t(102),o=t(7294),a=t(1736),r=["children","snippets"];n.Z=function(e){var n=e.children,t=e.snippets,c=(0,i.Z)(e,r),s=n.split(/\r?\n/),l=t?JSON.parse(t).map((function(e){return Array.isArray(e)?s.slice(e[0],e[1]).join("\n"):e})).join("\n"):s.join("\n");return o.createElement(a.Z,c,l)}},4400:function(e,n,t){t.r(n),t.d(n,{contentTitle:function(){return d},default:function(){return g},frontMatter:function(){return u},metadata:function(){return p},toc:function(){return m}});var i=t(3117),o=t(102),a=(t(7294),t(3905)),r=t(1736),c=t(6793),s=t(5739),l=["components"],u={id:"account",title:"Account"},d=void 0,p={unversionedId:"sdk/workshop/claimer/account",id:"sdk/workshop/claimer/account",title:"Account",description:"Now we'll create an account for a  Claimer.",source:"@site/docs/sdk/1-workshop/04-claimer/01-account.md",sourceDirName:"sdk/1-workshop/04-claimer",slug:"/sdk/workshop/claimer/account",permalink:"/docs/sdk/workshop/claimer/account",editUrl:"https://github.com/KILTprotocol/docs/edit/master/docs/sdk/1-workshop/04-claimer/01-account.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{id:"account",title:"Account"},sidebar:"sdk",previous:{title:"\ud83d\udc64 Claimer",permalink:"/docs/sdk/workshop/claimer/"},next:{title:"DID",permalink:"/docs/sdk/workshop/claimer/did"}},m=[{value:"Account",id:"account",children:[],level:2},{value:"Index",id:"index",children:[],level:2}],k={toc:m};function g(e){var n=e.components,t=(0,o.Z)(e,l);return(0,a.kt)("wrapper",(0,i.Z)({},k,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"Now we'll create an account for a  ",(0,a.kt)("span",{class:"label-role claimer"},"Claimer"),"."),(0,a.kt)("h2",{id:"account"},"Account"),(0,a.kt)("p",null,"To generate an account, we'll repeat the steps from the ",(0,a.kt)("inlineCode",{parentName:"p"},"Attester Account"),"."),(0,a.kt)("p",null,"Open ",(0,a.kt)("inlineCode",{parentName:"p"},"claimer/getAccount.js")," and paste the following code:"),(0,a.kt)(r.Z,{className:"language-js",title:"claimer/getAccount.js",mdxType:"CodeBlock"},"const { mnemonicGenerate } = require('@polkadot/util-crypto');\nconst Kilt = require('@kiltprotocol/sdk-js');\n\nfunction getAccount(mnemonic) {\n  // setup keyring\n  const keyring = new Kilt.Utils.Keyring({\n    ss58Format: 38,\n    type: 'sr25519',\n  });\n  \n  // use the mnemonic from .env or make a new one\n  const phrase = mnemonic || mnemonicGenerate();\n  const account = keyring.addFromMnemonic(phrase);\n\n  if (!mnemonic) {\n    // save the mnemonic and address in .env to we keep the same account\n    console.log('save to mnemonic and address to .env to continue!\\n\\n');\n    console.log(`CLAIMER_MNEMONIC=\"${phrase}\"`);\n    console.log(`CLAIMER_ADDRESS=${account.address}\\n\\n`);\n    process.exit();\n  }\n\n  return account;\n}\n\nmodule.exports = getAccount\n"),(0,a.kt)("h2",{id:"index"},"Index"),(0,a.kt)("p",null,"Let's setup our  ",(0,a.kt)("span",{class:"label-role claimer"},"Claimer")," index. Copy the below into ",(0,a.kt)("inlineCode",{parentName:"p"},"claimer/index.js")),(0,a.kt)(c.Z,{title:"claimer/index.js",className:"language-js",snippets:'[ [0, 16], [20,25], [26,27], "  console.log(account);", [29,31], "initialize();" ]',mdxType:"SnippetBlock"},s.Z),(0,a.kt)("p",null,"Now run it to get your  ",(0,a.kt)("span",{class:"label-role claimer"},"Claimer")," ",(0,a.kt)("inlineCode",{parentName:"p"},"<address>")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"<mnenomic>"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"node ./claimer/index.js\n")),(0,a.kt)("p",null,"Your output will provide you with ",(0,a.kt)("inlineCode",{parentName:"p"},"CLAIMER_MNEMONIC")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"CLAIMER_ADDRESS"),". Be sure to save it in your ",(0,a.kt)("inlineCode",{parentName:"p"},".env")," file, it should now look similar to this."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-env",metastring:'title=".env"',title:'".env"'},'WSS_ADDRESS=wss://peregrine.kilt.io/parachain-public-ws\n\nATTESTER_MNEMONIC="gold upset segment ca...\nATTESTER_ADDRESS=5CUoo2vAegeaZHPNdxZyuMe...\nATTESTER_DID_URI=did:kilt:4pjUYTbttjJHqT...\n\nCLAIMER_MNEMONIC="gold upset segment cak...\nCLAIMER_ADDRESS=5CUoo2vAegeaZHPNdxZyuMes...\n')),(0,a.kt)("p",null,"That's it - You've successfully generated your  ",(0,a.kt)("span",{class:"label-role claimer"},"Claimer")," account! Let's setup the  ",(0,a.kt)("span",{class:"label-role claimer"},"Claimer"),"'s off-chain ",(0,a.kt)("inlineCode",{parentName:"p"},"DID")," next!"))}g.isMDXComponent=!0},5739:function(e,n){n.Z="// make environment variables available in process.env\nrequire('dotenv').config();\n\n// bring in dependencies\nconst Kilt = require('@kiltprotocol/sdk-js');\nconst { cryptoWaitReady } = require('@polkadot/util-crypto');\n\n// bring in environment variables\nconst { \n  WSS_ADDRESS: address,\n  CLAIMER_MNEMONIC: mnemonic,\n  CLAIMER_DID_URI: didUri,\n} = process.env\n\n// load Claimer helper functions\nconst getAccount = require('./getAccount');\nconst getLightDid = require('./getLightDid');\nconst createClaim = require('./createClaim');\nconst createRequest = require('./createRequest');\nconst createPresentation = require('./createPresentation');\n\n// initialize the Claimer account\nasync function initialize() {\n  await cryptoWaitReady();\n  await Kilt.init({ address });\n  const keystore = new Kilt.Did.DemoKeystore();\n  const account = getAccount(mnemonic);\n  const lightDid = await getLightDid(didUri, keystore, mnemonic);\n  return { keystore, account, lightDid }\n}\n\n// export convenience functions\nmodule.exports = {\n  // creates claim from a CType and content returning data\n  async createClaim(ctypeJSON, content) {\n    const ctype = JSON.parse(ctypeJSON);\n    const { lightDid } = await initialize();\n    const claim = createClaim(lightDid, ctype, content);\n    return JSON.stringify(claim);\n  },\n  // creates claim request from claim returning data\n  async createRequest(claimJSON) {\n    // parse claim, load account, build request return data\n    const claim = JSON.parse(claimJSON);\n    const { lightDid, keystore } = await initialize();\n\n    try {\n      // use test request if it exists\n      const oldRequest = require('./_request.json');\n      return JSON.stringify(oldRequest);\n    } catch(e) {\n      // otherwise create a new one\n      const newRequest = await createRequest(lightDid, keystore, claim);\n      return JSON.stringify(newRequest);\n    }\n  },\n  async createPresentation(credentialJSON, challenge) {\n    const credential = JSON.parse(credentialJSON);\n    const { lightDid, keystore } = await initialize();\n    const presentation = await createPresentation(credential, challenge, lightDid, keystore);\n    return JSON.stringify(presentation);\n  },\n}"}}]);