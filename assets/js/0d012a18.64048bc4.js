"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[273],{3905:function(e,t,r){r.d(t,{Zo:function(){return u},kt:function(){return f}});var n=r(7294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function s(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function i(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var c=n.createContext({}),l=function(e){var t=n.useContext(c),r=t;return e&&(r="function"==typeof e?e(t):s(s({},t),e)),r},u=function(e){var t=l(e.components);return n.createElement(c.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,o=e.originalType,c=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),d=l(r),f=a,y=d["".concat(c,".").concat(f)]||d[f]||p[f]||o;return r?n.createElement(y,s(s({ref:t},u),{},{components:r})):n.createElement(y,s({ref:t},u))}));function f(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=r.length,s=new Array(o);s[0]=d;var i={};for(var c in t)hasOwnProperty.call(t,c)&&(i[c]=t[c]);i.originalType=e,i.mdxType="string"==typeof e?e:a,s[1]=i;for(var l=2;l<o;l++)s[l]=r[l];return n.createElement.apply(null,s)}return n.createElement.apply(null,r)}d.displayName="MDXCreateElement"},5777:function(e,t,r){r.r(t),r.d(t,{frontMatter:function(){return i},contentTitle:function(){return c},metadata:function(){return l},toc:function(){return u},default:function(){return d}});var n=r(3117),a=r(102),o=(r(7294),r(3905)),s=["components"],i={id:"attester",title:"\ud83c\udfe2 Attester"},c=void 0,l={unversionedId:"sdk/workshop/attester/attester",id:"sdk/workshop/attester/attester",title:"\ud83c\udfe2 Attester",description:"In this section you will walk though all processes done by the Attester.",source:"@site/docs/sdk/1-workshop/03-attester/index.md",sourceDirName:"sdk/1-workshop/03-attester",slug:"/sdk/workshop/attester/",permalink:"/docs/sdk/workshop/attester/",editUrl:"https://github.com/KILTprotocol/docs/edit/master/docs/sdk/1-workshop/03-attester/index.md",tags:[],version:"current",frontMatter:{id:"attester",title:"\ud83c\udfe2 Attester"},sidebar:"sdk",previous:{title:"\ud83d\udc53 Overview",permalink:"/docs/sdk/workshop/overview"},next:{title:"Account",permalink:"/docs/sdk/workshop/attester/account"}},u=[{value:"Folder Structure",id:"folder-structure",children:[],level:2}],p={toc:u};function d(e){var t=e.components,r=(0,a.Z)(e,s);return(0,o.kt)("wrapper",(0,n.Z)({},p,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"In this section you will walk though all processes done by the ",(0,o.kt)("span",{class:"label-role attester"},"Attester"),"."),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"You will ",(0,o.kt)("a",{parentName:"li",href:"./account"},"create an account")," that is used to pay for all transactions and the storage deposits."),(0,o.kt)("li",{parentName:"ol"},"Next step is to ",(0,o.kt)("a",{parentName:"li",href:"./did"},"create a DID")," which is the identity that is used to create attestations.\nWhile you always can switch the KILT account and pay deposits and fees with any account you like, your DID is the way claimers will identify you and put trust in you."),(0,o.kt)("li",{parentName:"ol"},"Before we can attest claims, ",(0,o.kt)("a",{parentName:"li",href:"./ctype"},"we need a CType")," which describes and gives context to what we attest."),(0,o.kt)("li",{parentName:"ol"},"After we can pay fees and deposits, have an identity and a CType ",(0,o.kt)("a",{parentName:"li",href:"../attestation"},"we can create attestations"),".")),(0,o.kt)("h2",{id:"folder-structure"},"Folder Structure"),(0,o.kt)("p",null,"Create the following files in the ",(0,o.kt)("span",{class:"label-role attester"},"Attester")," folder.\nThis folders serves to mimic an ",(0,o.kt)("span",{class:"label-role attester"},"Attester")," service, the\noutside world will interact with ",(0,o.kt)("inlineCode",{parentName:"p"},"attester/index.js")," from our main project file."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"\u2514\u2500 kilt-rocks/ # project\n  \u2514\u2500 attester/ # all attester code\n    \u251c\u2500 attestCredential.js # issues credentials\n    \u251c\u2500 generateKeypairs.js # executed only once to generate your private keypairs for the DID\n    \u251c\u2500 getAccount.js # loads the Attester account\n    \u251c\u2500 createCtype.js # create a local ctype definition\n    \u251c\u2500 getCtype.js # returns a specific ctype\n    \u251c\u2500 createFullDid.js # registers the Attester on chain DID\n    \u251c\u2500 getFullDid.js # loads the Attester on chain DID\n    \u2514\u2500 index.js # main entry for outside world (Claimer, Verifier)\n  ...\n")))}d.isMDXComponent=!0}}]);