"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[5561],{10855:function(e,t,n){n.r(t),n.d(t,{assets:function(){return c},contentTitle:function(){return l},default:function(){return u},frontMatter:function(){return s},metadata:function(){return p},toc:function(){return d}});var a=n(83117),r=(n(67294),n(3905)),i=n(90814),o=n(84430);const s={id:"ctype",title:"CType"},l=void 0,p={unversionedId:"develop/workshop/attester/ctype",id:"develop/workshop/attester/ctype",title:"CType",description:"A claim type (CType for short) is a KILT-specific term, but the concept is simple:",source:"@site/docs/develop/03_workshop/04_attester/03_ctype.md",sourceDirName:"develop/03_workshop/04_attester",slug:"/develop/workshop/attester/ctype",permalink:"/docs/develop/workshop/attester/ctype",draft:!1,editUrl:"https://github.com/KILTprotocol/docs/edit/master/docs/develop/03_workshop/04_attester/03_ctype.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{id:"ctype",title:"CType"},sidebar:"workshop",previous:{title:"DID",permalink:"/docs/develop/workshop/attester/did"},next:{title:"\ud83d\udc64 Claimer",permalink:"/docs/develop/workshop/claimer/"}},c={},d=[{value:"Create CType",id:"create-ctype",level:2},{value:"Get CType",id:"get-ctype",level:2},{value:"Run",id:"run",level:2}],m={toc:d};function u(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"A claim type (CType for short) is a KILT-specific term, but the concept is simple:\nA CType defines the structure of a claim.\nYou can think of it as the data model for your claim."),(0,r.kt)("p",null,"Before the ",(0,r.kt)("span",{className:"label-role attester"},"Attester")," can issue attestations, they need to decide which CType they support.\nA traffic authority will only issue driver's licenses (=> CType for drivers license) and not trade register excerpts.\nSince CTypes enable interoperability between Attesters, it is highly recommended to use existing CTypes instead of creating new ones.\nBut in this workshop, we create our own CType."),(0,r.kt)("admonition",{title:"CType",type:"info"},(0,r.kt)("p",{parentName:"admonition"},"A CType ensures that a claim contains all required attributes, e.g., a driver's license has to contain a name, date of birth, the type of vehicle that can be driven by the claimer.\nThe CType is especially important since a verifier would request attestations for a specific CType (e.g., the traffic police wants to see your driver's license and not your gym membership)."),(0,r.kt)("p",{parentName:"admonition"},"If you want to learn more about CTypes take a look at our ",(0,r.kt)("a",{parentName:"p",href:"/docs/concepts/credentials/ctypes"},"in depth CType documentation"),".\nYou can also ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/KILTprotocol/ctype-index"},"read through existing ctypes in our ctype-index"),".")),(0,r.kt)("p",null,"Creating CTypes requires an account and a full DID.\nMake sure your account holds tokes so that you can pay the fees for creating a CType."),(0,r.kt)("p",null,"For example, a very basic CType for a driver's license could look like this:"),(0,r.kt)(i.Z,{className:"language-json",mdxType:"CodeBlock"},o.Z),(0,r.kt)("p",null,"Let's have a look at these attributes."),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Key"),(0,r.kt)("th",{parentName:"tr",align:null},"Value"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"schema")," > ",(0,r.kt)("inlineCode",{parentName:"td"},"$id")),(0,r.kt)("td",{parentName:"tr",align:null},"The KILT id of this CType.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"schema")," > ",(0,r.kt)("inlineCode",{parentName:"td"},"$schema")),(0,r.kt)("td",{parentName:"tr",align:null},"The JSON schema on which the CType is based.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"schema")," > ",(0,r.kt)("inlineCode",{parentName:"td"},"title")),(0,r.kt)("td",{parentName:"tr",align:null},"The title of the CType.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"schema")," > ",(0,r.kt)("inlineCode",{parentName:"td"},"properties")),(0,r.kt)("td",{parentName:"tr",align:null},"The properties that a claim of type in ",(0,r.kt)("inlineCode",{parentName:"td"},"$schema")," should have.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"owner")),(0,r.kt)("td",{parentName:"tr",align:null},"The DID of the user who created this CType.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"hash")),(0,r.kt)("td",{parentName:"tr",align:null},"Most important attribute, the hash is the CType's ",(0,r.kt)("strong",{parentName:"td"},"digital footprint"),".")))),(0,r.kt)("p",null,"A CType is stored on the KILT blockchain."),(0,r.kt)("p",null,"In a real-life setup, a user would simply retrieve an existing CType from the chain or a repository of CTypes for example via a Credential Registry's REST API."),(0,r.kt)("p",null,"In this tutorial, we'll have the ",(0,r.kt)("span",{className:"label-role attester"},"Attester")," create and attempt to store a CType on the KILT test blockchain."),(0,r.kt)("h2",{id:"create-ctype"},"Create CType"),(0,r.kt)("p",null,"Now we have our entry ready, create a new file ",(0,r.kt)("inlineCode",{parentName:"p"},"attester/ctypeSchema.ts"),".\nCopy the following to create a ",(0,r.kt)("inlineCode",{parentName:"p"},"CType")," from a schema:"),(0,r.kt)(i.Z,{title:"attester/ctypeSchema.ts",className:"language-ts",mdxType:"CodeBlock"},"import * as Kilt from '@kiltprotocol/sdk-js'\n\n// returns CTYPE from a schema\nexport function getCtypeSchema(): Kilt.CType {\n  return Kilt.CType.fromSchema({\n    $schema: 'http://kilt-protocol.org/draft-01/ctype#',\n    title: 'Drivers License',\n    properties: {\n      name: {\n        type: 'string'\n      },\n      age: {\n        type: 'integer'\n      }\n    },\n    type: 'object'\n  })\n}\n"),(0,r.kt)("h2",{id:"get-ctype"},"Get CType"),(0,r.kt)("p",null,"Create a new file ",(0,r.kt)("inlineCode",{parentName:"p"},"attester/generateCtype.ts"),".\nWe'll use this to check if the ",(0,r.kt)("inlineCode",{parentName:"p"},"CType")," is on-chain already.\nIf yes we'll return it, otherwise we'll store it on-chain.\nRemember, an account must have the required amount to pay the Angel's fee and deposit."),(0,r.kt)(i.Z,{title:"attester/generateCtype.ts",className:"language-ts",mdxType:"CodeBlock"},"import { config as envConfig } from 'dotenv'\n\nimport * as Kilt from '@kiltprotocol/sdk-js'\n\nimport { generateKeypairs } from './generateKeypairs'\nimport { getAccount } from './generateAccount'\nimport { getCtypeSchema } from './ctypeSchema'\nimport { getFullDid } from './generateDid'\n\nexport async function ensureStoredCtype(): Promise<Kilt.CType> {\n  // Init\n  await Kilt.init({ address: process.env.WSS_ADDRESS })\n  const mnemonic = process.env.ATTESTER_MNEMONIC as string\n  const did = process.env.ATTESTER_DID_URI as Kilt.DidUri\n\n  // Load Account\n  const account = await getAccount(mnemonic)\n\n  // Load DID\n  const keystore = new Kilt.Did.DemoKeystore()\n  await generateKeypairs(keystore, mnemonic)\n  const fullDid = await getFullDid(did)\n\n  // get the CTYPE and see if it's stored, if yes return it\n  const ctype = getCtypeSchema()\n  const isStored = await ctype.verifyStored()\n  if (isStored) {\n    console.log('Ctype already stored. Skipping creation')\n    return ctype\n  }\n  console.log('Ctype not present. Creating it now...')\n\n  // authorize the extrinsic\n  const tx = await ctype.getStoreTx()\n  const extrinsic = await fullDid.authorizeExtrinsic(\n    tx,\n    keystore,\n    account.address\n  )\n\n  // write to chain then return ctype\n  await Kilt.BlockchainUtils.signAndSubmitTx(extrinsic, account, {\n    resolveOn: Kilt.BlockchainUtils.IS_FINALIZED\n  })\n\n  return ctype\n}\n\n// don't execute if this is imported by another file\nif (require.main === module) {\n  envConfig()\n  ensureStoredCtype()\n    .catch((e) => {\n      console.log('Error while checking on chain ctype', e)\n      process.exit(1)\n    })\n    .then(() => process.exit())\n}\n"),(0,r.kt)("h2",{id:"run"},"Run"),(0,r.kt)("p",null,"To run it, just execute the ",(0,r.kt)("inlineCode",{parentName:"p"},"attester/generateCtype.ts")," file."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"yarn ts-node attester/generateCtype.ts\n")),(0,r.kt)("p",null,"OK, now before we can issue Credentials, we need a ",(0,r.kt)("span",{className:"label-role claimer"},"Claimer")," to request one! Let's move on!"))}u.isMDXComponent=!0},84430:function(e,t){t.Z='{\n  "schema": {\n    "$schema": "http://kilt-protocol.org/draft-01/ctype#",\n    "title": "Drivers License by did:kilt:4tKLFGEH5KT7xDqkA4QcdCFSeH8Vd3ovYHFmFJLTuhG1GcHx",\n    "properties": {\n      "name": {\n        "type": "string"\n      },\n      "age": {\n        "type": "integer"\n      },\n      "id": {\n        "type": "string"\n      }\n    },\n    "type": "object",\n    "$id": "kilt:ctype:0x485ab5479a20a6427265a902b8bfa5e84b31ba17f6e22258cc4797e725635111"\n  },\n  "owner": "did:kilt:4tKLFGEH5KT7xDqkA4QcdCFSeH8Vd3ovYHFmFJLTuhG1GcHx",\n  "hash": "0x485ab5479a20a6427265a902b8bfa5e84b31ba17f6e22258cc4797e725635111"\n}'}}]);