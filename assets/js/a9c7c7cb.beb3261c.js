"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[3758],{23575:function(e,n,t){t.r(n),t.d(n,{frontMatter:function(){return c},contentTitle:function(){return l},metadata:function(){return u},toc:function(){return p},default:function(){return m}});var o=t(83117),r=t(80102),s=(t(67294),t(3905)),d=t(31736),a=t(5871),i=["components"],c={id:"howto-integrate-nodejs",title:"NodeJS"},l=void 0,u={unversionedId:"develop/sdk/integrate/howto-integrate-nodejs",id:"develop/sdk/integrate/howto-integrate-nodejs",title:"NodeJS",description:"NodeJS is natively supported and doesn't require any additional setup.",source:"@site/docs/develop/01_sdk/04_integrate/01_nodejs.md",sourceDirName:"develop/01_sdk/04_integrate",slug:"/develop/sdk/integrate/howto-integrate-nodejs",permalink:"/docs/develop/sdk/integrate/howto-integrate-nodejs",editUrl:"https://github.com/KILTprotocol/docs/edit/master/docs/develop/01_sdk/04_integrate/01_nodejs.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{id:"howto-integrate-nodejs",title:"NodeJS"},sidebar:"sdk",previous:{title:"How to Integrate",permalink:"/docs/develop/sdk/integrate/"},next:{title:"Browser",permalink:"/docs/develop/sdk/integrate/howto-integrate-browser"}},p=[],k={toc:p};function m(e){var n=e.components,t=(0,r.Z)(e,i);return(0,s.kt)("wrapper",(0,o.Z)({},k,t,{components:n,mdxType:"MDXLayout"}),(0,s.kt)("p",null,"NodeJS is natively supported and doesn't require any additional setup."),(0,s.kt)("p",null,"Have a look at these example ",(0,s.kt)("inlineCode",{parentName:"p"},"package.json")," and ",(0,s.kt)("inlineCode",{parentName:"p"},"index.js")," files for reference:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "name": "kilt-sdk-node-test",\n  "type": "module",\n  "version": "1.0.0",\n  "main": "index.js",\n  "license": "MIT",\n  "dependencies": {\n    "@kiltprotocol/sdk-js": "0.27.0"\n  }\n}\n')),(0,s.kt)(d.Z,{className:"language-ts",mdxType:"CodeBlock"},a.Z))}m.isMDXComponent=!0},5871:function(e,n){n.Z="import type { KeyringPair } from '@polkadot/keyring/types'\n\nimport * as Kilt from '@kiltprotocol/sdk-js'\n\nexport async function queryAccountWeb3Name(\n  lookupAccountAddress: KeyringPair['address']\n): Promise<Kilt.Did.Web3Names.Web3Name | null> {\n  // Only function to call to perform the lookup.\n  const accountWeb3Name = await Kilt.Did.AccountLinks.queryWeb3Name(\n    lookupAccountAddress\n  )\n  if (accountWeb3Name) {\n    console.log(\n      `web3name for account \"${lookupAccountAddress}\" -> \"${accountWeb3Name}\"`\n    )\n  } else {\n    console.log(\n      `Account \"${lookupAccountAddress}\" does not have a linked web3name.`\n    )\n  }\n\n  return accountWeb3Name\n}\n"}}]);