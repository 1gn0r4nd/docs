"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[876],{6793:function(e,t,n){var i=n(102),a=n(7294),r=n(1736),s=["children","snippets"];t.Z=function(e){var t=e.children,n=e.snippets,o=(0,i.Z)(e,s),l=t.split(/\r?\n/),c=n?JSON.parse(n).map((function(e){return Array.isArray(e)?l.slice(e[0],e[1]).join("\n"):e})).join("\n"):l.join("\n");return a.createElement(r.Z,o,c)}},6250:function(e,t,n){n.r(t),n.d(t,{contentTitle:function(){return u},default:function(){return g},frontMatter:function(){return m},metadata:function(){return p},toc:function(){return h}});var i=n(3117),a=n(102),r=(n(7294),n(3905)),s=n(1736),o=n(6793),l=n(5739),c=n(6431),d=["components"],m={id:"request",title:"Request an Attestation"},u=void 0,p={unversionedId:"sdk/workshop/claimer/request",id:"sdk/workshop/claimer/request",title:"Request an Attestation",description:"In this section we'll create a Claim and request a RequestForAttestation.",source:"@site/docs/sdk/1-workshop/04-claimer/03-request.md",sourceDirName:"sdk/1-workshop/04-claimer",slug:"/sdk/workshop/claimer/request",permalink:"/docs/sdk/workshop/claimer/request",editUrl:"https://github.com/KILTprotocol/docs/edit/master/docs/sdk/1-workshop/04-claimer/03-request.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{id:"request",title:"Request an Attestation"},sidebar:"sdk",previous:{title:"DID",permalink:"/docs/sdk/workshop/claimer/did"},next:{title:"\ud83e\uddfe Attestation",permalink:"/docs/sdk/workshop/attestation"}},h=[{value:"Create Claim",id:"create-claim",children:[],level:2},{value:"Create Request",id:"create-request",children:[],level:2},{value:"Claimer Index",id:"claimer-index",children:[],level:2},{value:"Index",id:"index",children:[],level:2}],k={toc:h};function g(e){var t=e.components,n=(0,a.Z)(e,d);return(0,r.kt)("wrapper",(0,i.Z)({},k,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"In this section we'll create a ",(0,r.kt)("inlineCode",{parentName:"p"},"Claim")," and request a ",(0,r.kt)("inlineCode",{parentName:"p"},"RequestForAttestation"),".\nBut a claim in itself has no value. To become valid in the eyes of ",(0,r.kt)("span",{class:"label-role verifier"},"Verifiers"),",\nit needs to be attested by an entity they can trust: an ",(0,r.kt)("span",{class:"label-role attester"},"Attester"),"."),(0,r.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,r.kt)("div",{parentName:"div",className:"admonition-heading"},(0,r.kt)("h5",{parentName:"div"},(0,r.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,r.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,r.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"info")),(0,r.kt)("div",{parentName:"div",className:"admonition-content"},(0,r.kt)("p",{parentName:"div"}," KILT is an open system.\nAnyone/anything can make a claim about themselves and attest this claim. But a claim only has value if the verifier ",(0,r.kt)("em",{parentName:"p"},"trusts")," the attester."))),(0,r.kt)("h2",{id:"create-claim"},"Create Claim"),(0,r.kt)("p",null,"We'll use provided ",(0,r.kt)("inlineCode",{parentName:"p"},"light DID"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"ctype")," and ",(0,r.kt)("span",{class:"label-role claimer"},"Claimer")," provided ",(0,r.kt)("inlineCode",{parentName:"p"},"content")," to generate the ",(0,r.kt)("inlineCode",{parentName:"p"},"Claim")," object. Create a file ",(0,r.kt)("inlineCode",{parentName:"p"},"claimer/createClaim.js")," and copy the code below."),(0,r.kt)(s.Z,{className:"language-js",title:"claimer/createClaim.js",mdxType:"CodeBlock"},"const Kilt = require('@kiltprotocol/sdk-js');\n\n// create a Claim object from lightDid, ctype and given content\nfunction createClaim(lightDid, ctype, content) {\n  const claim = Kilt.Claim.fromCTypeAndClaimContents(\n    ctype,\n    content,\n    lightDid.did\n  );\n\n  return claim;\n}\n\nmodule.exports = createClaim"),(0,r.kt)("h2",{id:"create-request"},"Create Request"),(0,r.kt)("p",null,"We don't want to send our ",(0,r.kt)("inlineCode",{parentName:"p"},"Claim")," object plainly over the internet. Instead\nwe'll form a ",(0,r.kt)("inlineCode",{parentName:"p"},"RequestForAttestation")," object that we can send to the ",(0,r.kt)("span",{class:"label-role attester"},"Attester"),".\nCreate a file ",(0,r.kt)("inlineCode",{parentName:"p"},"claimer/createRequest.js")," and copy the code below."),(0,r.kt)(s.Z,{className:"language-js",title:"claimer/createRequest.js",mdxType:"CodeBlock"},"const Kilt = require('@kiltprotocol/sdk-js');\n\n// create and return a RequestForAttestation from claim\nasync function createRequest(lightDid, keystore, claim) {\n  const request = Kilt.RequestForAttestation.fromClaim(claim);\n  await request.signWithDid(keystore, lightDid);\n  \n  console.log('\\n\\nsave this to ./claimer/_request.json for testing\\n\\n');\n  console.log(JSON.stringify(request, null, 2))\n  console.log('\\n\\n')\n  return request;\n}\n\nmodule.exports = createRequest;"),(0,r.kt)("p",null,"When ",(0,r.kt)("inlineCode",{parentName:"p"},"Attestations")," are given by ",(0,r.kt)("span",{class:"label-role attester"},"Attesters"),", they are written to chain which requires a deposit. Each new ",(0,r.kt)("inlineCode",{parentName:"p"},"RequestForAttestation")," is unique. While we're testing, we can store and reuse requests to avoid to avoid\nmultiple attestations. To do this store the output into ",(0,r.kt)("inlineCode",{parentName:"p"},"./claimer/_request.json"),". You can also share this\nrequest to others in the workshop to see how they get denied from fraudulent senders."),(0,r.kt)("h2",{id:"claimer-index"},"Claimer Index"),(0,r.kt)("p",null,"Ok, let's continue our ",(0,r.kt)("inlineCode",{parentName:"p"},"claimer/index.js"),". This will serve to export to convenience functions.\nFirst we'll import our helper functions we made above, then export ",(0,r.kt)("inlineCode",{parentName:"p"},"createClaim")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"createRequest"),"."),(0,r.kt)(o.Z,{title:"claimer/index.js",className:"language-js",snippets:'[ [0, 19], [20,56], "}" ]',mdxType:"SnippetBlock"},l.Z),(0,r.kt)("h2",{id:"index"},"Index"),(0,r.kt)("p",null,"Alright update our ",(0,r.kt)("inlineCode",{parentName:"p"},"index.js"),", we'll run it from there."),(0,r.kt)(o.Z,{title:"index.js",className:"language-js",snippets:"[ [0, 13], [14,32], [48,54] ]",mdxType:"SnippetBlock"},c.Z),(0,r.kt)("p",null,"run it from command line"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"node index.js\n")),(0,r.kt)("p",null,"OK, you've made a claim as a ",(0,r.kt)("span",{class:"label-role claimer"},"Claimer")," and\ncreated a request for attestation. Let's finish up our ",(0,r.kt)("span",{class:"label-role attester"},"Attester")," and get a credential!"))}g.isMDXComponent=!0},5739:function(e,t){t.Z="// make environment variables available in process.env\nrequire('dotenv').config();\n\n// bring in dependencies\nconst Kilt = require('@kiltprotocol/sdk-js');\nconst { cryptoWaitReady } = require('@polkadot/util-crypto');\n\n// bring in environment variables\nconst { \n  WSS_ADDRESS: address,\n  CLAIMER_MNEMONIC: mnemonic,\n  CLAIMER_DID_URI: didUri,\n} = process.env\n\n// load Claimer helper functions\nconst getAccount = require('./getAccount');\nconst getLightDid = require('./getLightDid');\nconst createClaim = require('./createClaim');\nconst createRequest = require('./createRequest');\nconst createPresentation = require('./createPresentation');\n\n// initialize the Claimer account\nasync function initialize() {\n  await cryptoWaitReady();\n  await Kilt.init({ address });\n  const keystore = new Kilt.Did.DemoKeystore();\n  const account = getAccount(mnemonic);\n  const lightDid = await getLightDid(didUri, keystore, mnemonic);\n  return { keystore, account, lightDid }\n}\n\n// export convenience functions\nmodule.exports = {\n  // creates claim from a CType and content returning data\n  async createClaim(ctypeJSON, content) {\n    const ctype = JSON.parse(ctypeJSON);\n    const { lightDid } = await initialize();\n    const claim = createClaim(lightDid, ctype, content);\n    return JSON.stringify(claim);\n  },\n  // creates claim request from claim returning data\n  async createRequest(claimJSON) {\n    // parse claim, load account, build request return data\n    const claim = JSON.parse(claimJSON);\n    const { lightDid, keystore } = await initialize();\n\n    try {\n      // use test request if it exists\n      const oldRequest = require('./_request.json');\n      return JSON.stringify(oldRequest);\n    } catch(e) {\n      // otherwise create a new one\n      const newRequest = await createRequest(lightDid, keystore, claim);\n      return JSON.stringify(newRequest);\n    }\n  },\n  async createPresentation(credentialJSON, challenge) {\n    const credential = JSON.parse(credentialJSON);\n    const { lightDid, keystore } = await initialize();\n    const presentation = await createPresentation(credential, challenge, lightDid, keystore);\n    return JSON.stringify(presentation);\n  },\n}"},6431:function(e,t){t.Z="// make environment variables available in process.env\nrequire('dotenv').config();\n\n// bring in dependencies\nconst Kilt = require('@kiltprotocol/sdk-js');\nconst { cryptoWaitReady } = require('@polkadot/util-crypto');\n\n// load the node address from .env\nconst { WSS_ADDRESS: address } = process.env\n\n// load actors for the workshop\nconst claimer = require('./claimer');\nconst attester = require('./attester');\nconst verifier = require('./verifier');\n\nasync function main() {\n  // wait for the crypto library to be ready\n  await cryptoWaitReady();\n\n  // connect to the KILT wss node\n  await Kilt.init({ address });\n\n  // Claimer gets ctype from Attester\n  const ctypeJSON = await attester.getCtype();\n\n  // Claimer forms a claim for the ctype\n  const content = { name: 'Alice', age: 25 };\n  const claimJSON = await claimer.createClaim(ctypeJSON, content);\n\n  // Claimer creates an attestation request\n  const requestJSON = await claimer.createRequest(claimJSON);\n\n  // Claimer sends request to the Attester for approval or rejection\n  const credentialJSON = await attester.attestCredential(requestJSON);\n  if (!credentialJSON) throw Error('credential denied'); \n\n  // Claimer gets a challenge from Verifier\n  const challenge = verifier.getChallenge();\n\n  // Claimer creates a signed presentation using credential and challenge\n  const presentationJSON = await claimer.createPresentation(credentialJSON, challenge);\n\n  // Claimer sends their presentation Verifier for processing\n  const isVerified = await verifier.verifyCredential(presentationJSON, challenge);\n\n  // presentation is verified or denied by the Verifier\n  if (isVerified) console.log('woohoo verified, workshop complete!');\n  else console.log('booo verification denied!');\n\n  // we can disconnect\n  await Kilt.disconnect();\n}\n\nmain();"}}]);