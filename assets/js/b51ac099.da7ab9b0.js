"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[741],{4111:function(e,n,t){t.r(n),t.d(n,{contentTitle:function(){return p},default:function(){return k},frontMatter:function(){return d},metadata:function(){return m},toc:function(){return u}});var i=t(3117),a=t(102),r=(t(7294),t(3905)),o=t(1736),s=t(5739),l=t(6431),c=["components"],d={id:"verification",title:"\ud83e\udd1d Verification"},p=void 0,m={unversionedId:"sdk/workshop/verification",id:"sdk/workshop/verification",title:"\ud83e\udd1d Verification",description:"In this section, you'll play the role of a Verifier:",source:"@site/docs/sdk/1-workshop/6-verification.md",sourceDirName:"sdk/1-workshop",slug:"/sdk/workshop/verification",permalink:"/docs/sdk/workshop/verification",editUrl:"https://github.com/KILTprotocol/docs/edit/master/docs/sdk/1-workshop/6-verification.md",tags:[],version:"current",sidebarPosition:6,frontMatter:{id:"verification",title:"\ud83e\udd1d Verification"},sidebar:"sdk",previous:{title:"\ud83e\uddfe Attestation",permalink:"/docs/sdk/workshop/attestation"},next:{title:"\ud83d\ude80 Done",permalink:"/docs/sdk/workshop/done"}},u=[{value:"Verifier Index",id:"verifier-index",children:[],level:2},{value:"Claimer Create Presentation",id:"claimer-create-presentation",children:[],level:2},{value:"Claimer Index",id:"claimer-index",children:[],level:2},{value:"Index",id:"index",children:[],level:2}],h={toc:u};function k(e){var n=e.components,t=(0,a.Z)(e,c);return(0,r.kt)("wrapper",(0,i.Z)({},h,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"In this section, you'll play the role of a ",(0,r.kt)("span",{class:"label-role verifier"},"Verifier"),":"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"You'll take an ",(0,r.kt)("inlineCode",{parentName:"li"},"Credential")," object given to you by a ",(0,r.kt)("span",{class:"label-role claimer"},"Claimer"),";"),(0,r.kt)("li",{parentName:"ul"},"You'll verify that its data is correct;"),(0,r.kt)("li",{parentName:"ul"},"You'll verify that the attestation is valid, i.e. its hash exists on-chain and the attestation has not been revoked."),(0,r.kt)("li",{parentName:"ul"},"You'll verify that the ",(0,r.kt)("inlineCode",{parentName:"li"},"Credential")," is owned by the  ",(0,r.kt)("span",{class:"label-role claimer"},"Claimer")," sending it")),(0,r.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,r.kt)("div",{parentName:"div",className:"admonition-heading"},(0,r.kt)("h5",{parentName:"div"},(0,r.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,r.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,r.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"Credential")),(0,r.kt)("div",{parentName:"div",className:"admonition-content"},(0,r.kt)("p",{parentName:"div"},"A ",(0,r.kt)("inlineCode",{parentName:"p"},"Credential")," object is also called an Attested Claim: It is what ",(0,r.kt)("span",{class:"label-role claimer"},"claimers")," present to ",(0,r.kt)("span",{class:"label-role verifier"},"verifiers")," upon request."))),(0,r.kt)("h2",{id:"verifier-index"},"Verifier Index"),(0,r.kt)("p",null,"Let's create our ",(0,r.kt)("inlineCode",{parentName:"p"},"verifier/index.js"),". Here we'll expose ",(0,r.kt)("inlineCode",{parentName:"p"},"getChallenge")," which returns a random and unique\nchallenge for the  ",(0,r.kt)("span",{class:"label-role claimer"},"Claimer")," to sign, this is used to prove ownership. We'll also expose ",(0,r.kt)("inlineCode",{parentName:"p"},"verifyCredential"),"\nwhich will do the actual verification. Copy the code below, this completes the  ",(0,r.kt)("span",{class:"label-role verifier"},"Verifier")," code!"),(0,r.kt)(o.Z,{className:"language-js",title:"verifier/index.js",mdxType:"CodeBlock"},"const Kilt = require('@kiltprotocol/sdk-js');\n\nmodule.exports = {\n  // returns a challenge for Claimer to sign\n  getChallenge() {\n    return Kilt.Utils.UUID.generate();\n  },\n  // verifies validity, ownership & attestation returning true|false\n  async verifyCredential(presentationJSON, challenge) {\n    const presentation = JSON.parse(presentationJSON);\n    const credential = new Kilt.Credential(presentation);\n\n    const isValid = await credential.verify();\n\n    const isSenderOwner = await Kilt.Credential.verify(presentation, { challenge });\n\n    const isAttested = !credential.attestation.revoked;\n\n    return isValid && isSenderOwner && isAttested\n  },\n}"),(0,r.kt)("h2",{id:"claimer-create-presentation"},"Claimer Create Presentation"),(0,r.kt)("p",null,"It's not enough to just send our credential as a  ",(0,r.kt)("span",{class:"label-role claimer"},"Claimer")," as we also need to prove our ownership.\nThis is done by creating a presentation by signing the  ",(0,r.kt)("span",{class:"label-role verifier"},"Verifier"),"'s challenge."),(0,r.kt)("p",null,"Create ",(0,r.kt)("inlineCode",{parentName:"p"},"claimer/createPresentation.js")," helper and copy the following code."),(0,r.kt)(o.Z,{className:"language-js",title:"claimer/createPresentation.js",mdxType:"CodeBlock"},"const Kilt = require('@kiltprotocol/sdk-js');\n\nasync function createPresentation(credentialObj, challenge, lightDid, keystore) {\n  // creates a Credential from object\n  const credential = new Kilt.Credential(credentialObj)\n\n  // creates the presentation from credential, keystore, did and challenge\n  const presentation = await credential.createPresentation({\n    signer: keystore,\n    claimerDid: lightDid,\n    challenge: challenge,\n  });\n\n  return presentation;\n}\n\nmodule.exports = createPresentation"),(0,r.kt)("h2",{id:"claimer-index"},"Claimer Index"),(0,r.kt)("p",null,"Let's update our main ",(0,r.kt)("inlineCode",{parentName:"p"},"claimer/index.js")),(0,r.kt)(o.Z,{className:"language-js",title:"claimer/index.js",mdxType:"CodeBlock"},s.Z),(0,r.kt)("h2",{id:"index"},"Index"),(0,r.kt)("p",null,"Let's update our main ",(0,r.kt)("inlineCode",{parentName:"p"},"index.js")," and bring this all together. Here we get a ",(0,r.kt)("inlineCode",{parentName:"p"},"challenge")," from the  ",(0,r.kt)("span",{class:"label-role verifier"},"Verifier"),",\ncreate a ",(0,r.kt)("inlineCode",{parentName:"p"},"presentation")," and have it send if for verification!"),(0,r.kt)(o.Z,{className:"language-js",title:"index.js",mdxType:"CodeBlock"},l.Z),(0,r.kt)("p",null,"run the workshop on command line"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"node index.js\n")),(0,r.kt)("p",null,"That's it! all done :-)"))}k.isMDXComponent=!0},5739:function(e,n){n.Z="// make environment variables available in process.env\nrequire('dotenv').config();\n\n// bring in dependencies\nconst Kilt = require('@kiltprotocol/sdk-js');\nconst { cryptoWaitReady } = require('@polkadot/util-crypto');\n\n// bring in environment variables\nconst { \n  WSS_ADDRESS: address,\n  CLAIMER_MNEMONIC: mnemonic,\n  CLAIMER_DID_URI: didUri,\n} = process.env\n\n// load Claimer helper functions\nconst getAccount = require('./getAccount');\nconst getLightDid = require('./getLightDid');\nconst createClaim = require('./createClaim');\nconst createRequest = require('./createRequest');\nconst createPresentation = require('./createPresentation');\n\n// initialize the Claimer account\nasync function initialize() {\n  await cryptoWaitReady();\n  await Kilt.init({ address });\n  const keystore = new Kilt.Did.DemoKeystore();\n  const account = getAccount(mnemonic);\n  const lightDid = await getLightDid(didUri, keystore, mnemonic);\n  return { keystore, account, lightDid }\n}\n\n// export convenience functions\nmodule.exports = {\n  // creates claim from a CType and content returning data\n  async createClaim(ctypeJSON, content) {\n    const ctype = JSON.parse(ctypeJSON);\n    const { lightDid } = await initialize();\n    const claim = createClaim(lightDid, ctype, content);\n    return JSON.stringify(claim);\n  },\n  // creates claim request from claim returning data\n  async createRequest(claimJSON) {\n    // parse claim, load account, build request return data\n    const claim = JSON.parse(claimJSON);\n    const { lightDid, keystore } = await initialize();\n\n    try {\n      // use test request if it exists\n      const oldRequest = require('./_request.json');\n      return JSON.stringify(oldRequest);\n    } catch(e) {\n      // otherwise create a new one\n      const newRequest = await createRequest(lightDid, keystore, claim);\n      return JSON.stringify(newRequest);\n    }\n  },\n  async createPresentation(credentialJSON, challenge) {\n    const credential = JSON.parse(credentialJSON);\n    const { lightDid, keystore } = await initialize();\n    const presentation = await createPresentation(credential, challenge, lightDid, keystore);\n    return JSON.stringify(presentation);\n  },\n}"},6431:function(e,n){n.Z="// make environment variables available in process.env\nrequire('dotenv').config();\n\n// bring in dependencies\nconst Kilt = require('@kiltprotocol/sdk-js');\nconst { cryptoWaitReady } = require('@polkadot/util-crypto');\n\n// load the node address from .env\nconst { WSS_ADDRESS: address } = process.env\n\n// load actors for the workshop\nconst claimer = require('./claimer');\nconst attester = require('./attester');\nconst verifier = require('./verifier');\n\nasync function main() {\n  // wait for the crypto library to be ready\n  await cryptoWaitReady();\n\n  // connect to the KILT wss node\n  await Kilt.init({ address });\n\n  // Claimer gets ctype from Attester\n  const ctypeJSON = await attester.getCtype();\n\n  // Claimer forms a claim for the ctype\n  const content = { name: 'Alice', age: 25 };\n  const claimJSON = await claimer.createClaim(ctypeJSON, content);\n\n  // Claimer creates an attestation request\n  const requestJSON = await claimer.createRequest(claimJSON);\n\n  // Claimer sends request to the Attester for approval or rejection\n  const credentialJSON = await attester.attestCredential(requestJSON);\n  if (!credentialJSON) throw Error('credential denied'); \n\n  // Claimer gets a challenge from Verifier\n  const challenge = verifier.getChallenge();\n\n  // Claimer creates a signed presentation using credential and challenge\n  const presentationJSON = await claimer.createPresentation(credentialJSON, challenge);\n\n  // Claimer sends their presentation Verifier for processing\n  const isVerified = await verifier.verifyCredential(presentationJSON, challenge);\n\n  // presentation is verified or denied by the Verifier\n  if (isVerified) console.log('woohoo verified, workshop complete!');\n  else console.log('booo verification denied!');\n\n  // we can disconnect\n  await Kilt.disconnect();\n}\n\nmain();"}}]);