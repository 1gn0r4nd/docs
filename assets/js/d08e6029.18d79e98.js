"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[447],{6793:function(e,t,n){var i=n(102),a=n(7294),r=n(1736),o=["children","snippets"];t.Z=function(e){var t=e.children,n=e.snippets,s=(0,i.Z)(e,o),l=t.split(/\r?\n/),c=n?JSON.parse(n).map((function(e){return Array.isArray(e)?l.slice(e[0],e[1]).join("\n"):e})).join("\n"):l.join("\n");return a.createElement(r.Z,s,c)}},1055:function(e,t,n){n.r(t),n.d(t,{contentTitle:function(){return p},default:function(){return f},frontMatter:function(){return u},metadata:function(){return k},toc:function(){return m}});var i=n(3117),a=n(102),r=(n(7294),n(3905)),o=n(1736),s=n(6793),l=n(6324),c=n(6431),d=["components"],u={id:"attestation",title:"\ud83e\uddfe Attestation"},p=void 0,k={unversionedId:"sdk/workshop/attestation",id:"sdk/workshop/attestation",title:"\ud83e\uddfe Attestation",description:"In this section, your Attester will recieve and process a RequestForAttestation where you'll",source:"@site/docs/sdk/1-workshop/05-attestation.md",sourceDirName:"sdk/1-workshop",slug:"/sdk/workshop/attestation",permalink:"/docs/sdk/workshop/attestation",editUrl:"https://github.com/KILTprotocol/docs/edit/master/docs/sdk/1-workshop/05-attestation.md",tags:[],version:"current",sidebarPosition:5,frontMatter:{id:"attestation",title:"\ud83e\uddfe Attestation"},sidebar:"sdk",previous:{title:"Request an Attestation",permalink:"/docs/sdk/workshop/claimer/request"},next:{title:"\ud83e\udd1d Verification",permalink:"/docs/sdk/workshop/verification"}},m=[{value:"Attest Credential",id:"attest-credential",children:[],level:2},{value:"Attester Index",id:"attester-index",children:[],level:2},{value:"Index",id:"index",children:[],level:2}],h={toc:m};function f(e){var t=e.components,n=(0,a.Z)(e,d);return(0,r.kt)("wrapper",(0,i.Z)({},h,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"In this section, your ",(0,r.kt)("span",{class:"label-role attester"},"Attester")," will recieve and process a ",(0,r.kt)("inlineCode",{parentName:"p"},"RequestForAttestation")," where you'll"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Attest or deny it;"),(0,r.kt)("li",{parentName:"ul"},"Store the attestation on the chain (more specifically only its hash, we'll get to that);"),(0,r.kt)("li",{parentName:"ul"},"Build the ",(0,r.kt)("inlineCode",{parentName:"li"},"Credential")," object which will be send back to the  ",(0,r.kt)("span",{class:"label-role claimer"},"Claimer"),".")),(0,r.kt)("h2",{id:"attest-credential"},"Attest Credential"),(0,r.kt)("p",null,"We'll use our ",(0,r.kt)("inlineCode",{parentName:"p"},"account"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"fullDid"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"keystore")," and provided ",(0,r.kt)("inlineCode",{parentName:"p"},"RequestForAttestaion")," to ensure\nthe request is ",(0,r.kt)("inlineCode",{parentName:"p"},"attested")," and return a ",(0,r.kt)("inlineCode",{parentName:"p"},"Credential"),"."),(0,r.kt)(o.Z,{className:"language-js",title:"attester/attestCredential.js",mdxType:"CodeBlock"},"const Kilt = require('@kiltprotocol/sdk-js')\n\nasync function attestCredential(account, fullDid, keystore, request) {\n  // build the attestation object\n  const attestation = Kilt.Attestation.fromRequestAndDid(request, fullDid.details.did);\n\n  // check the request content and deny based on your business logic..\n  // if (request.claim.content.age < 20) return null;\n\n  // if the attestaion is not yet on chain store it\n  if (!await Kilt.Attestation.query(attestation.claimHash)) {\n\n    // form tx and authorized extrinsic\n    const tx = await attestation.store();\n    const extrinsic = await fullDid.details.authorizeExtrinsic(\n      tx,\n      keystore,\n      account.address\n    );\n\n    // write to chain\n    await Kilt.BlockchainUtils.signAndSubmitTx(extrinsic, account, {\n      resolveOn: Kilt.BlockchainUtils.IS_FINALIZED,\n    });\n  }\n\n  // build the credential and return it\n  const credential = Kilt.Credential.fromRequestAndAttestation(\n    request,\n    attestation\n  );\n\n  return credential;\n}\n\nmodule.exports = attestCredential;\n"),(0,r.kt)("h2",{id:"attester-index"},"Attester Index"),(0,r.kt)("p",null,"Let's update our ",(0,r.kt)("inlineCode",{parentName:"p"},"attester/index.js")," to bring in the helper function above and expose ",(0,r.kt)("inlineCode",{parentName:"p"},"attestCredential"),"\nto the outside world!. This completes the ",(0,r.kt)("span",{class:"label-role attester"},"Attester")," code!"),(0,r.kt)(o.Z,{className:"language-js",title:"attester/index.js",mdxType:"CodeBlock"},l.Z),(0,r.kt)("h2",{id:"index"},"Index"),(0,r.kt)("p",null,"Let's update our main ",(0,r.kt)("inlineCode",{parentName:"p"},"index.js"),". Here we send our previous request to the ",(0,r.kt)("span",{class:"label-role attester"},"Attester"),"\nand will recieve our ",(0,r.kt)("inlineCode",{parentName:"p"},"Credential"),"!"),(0,r.kt)(s.Z,{title:"index.js",className:"language-js",snippets:'[ [0, 13], [14,35], "  console.log(credentialJSON);", [48,54] ]',mdxType:"SnippetBlock"},c.Z),(0,r.kt)("p",null,"run it from command line"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"node index.js\n")),(0,r.kt)("p",null,"You can copy the ",(0,r.kt)("inlineCode",{parentName:"p"},"Credential")," object if you want to test with other ",(0,r.kt)("inlineCode",{parentName:"p"},"Verifiers")," in the workshop :-)"),(0,r.kt)("p",null,"Your job as an ",(0,r.kt)("span",{class:"label-role attester"},"Attester")," is done: you've successfully attested a claim, written the attestation hash onto the chain, and prepared the ",(0,r.kt)("inlineCode",{parentName:"p"},"Credential")," object for the  ",(0,r.kt)("span",{class:"label-role claimer"},"Claimer"),"."),(0,r.kt)("p",null,"Let's move on to setup our  ",(0,r.kt)("span",{class:"label-role verifier"},"Verifier"),"!!"))}f.isMDXComponent=!0},6324:function(e,t){t.Z="// make environment variables available in process.env\nrequire('dotenv').config();\n\n// bring in dependencies\nconst Kilt = require('@kiltprotocol/sdk-js');\nconst { cryptoWaitReady } = require('@polkadot/util-crypto');\n\n// bring in environment variables\nconst {\n  WSS_ADDRESS: address,\n  ATTESTER_MNEMONIC: mnemonic,\n  ATTESTER_DID_URI: didUri,\n} = process.env\n\n// load Attester helper functions\nconst getAccount = require('./getAccount');\nconst getFullDid = require('./getFullDid');\nconst getCtype = require('./getCtype');\nconst attestCredential = require('./attestCredential');\n\n// initialize the Attester account\nasync function initialize() {\n  await cryptoWaitReady();\n  await Kilt.init({ address });\n  const account = getAccount(mnemonic);\n  const keystore = new Kilt.Did.DemoKeystore();\n  const fullDid = await getFullDid(didUri, keystore, mnemonic, account);\n  return { keystore, account, fullDid }\n}\n\n// export for the outside world\nmodule.exports = {\n  async getCtype() {\n    // load the account, get the CType, return as data\n    const { fullDid, account, keystore } = await initialize();\n    const ctype = await getCtype(fullDid, keystore, account);\n    return JSON.stringify(ctype);\n  },\n  async attestCredential(requestJSON) {\n    // parse, load account, attest credential, return as data\n    const request = JSON.parse(requestJSON);\n    const { account, fullDid, keystore } = await initialize();\n    const credential = await attestCredential(account, fullDid, keystore, request);\n    return JSON.stringify(credential);\n  },\n}\n"},6431:function(e,t){t.Z="// make environment variables available in process.env\nrequire('dotenv').config();\n\n// bring in dependencies\nconst Kilt = require('@kiltprotocol/sdk-js');\nconst { cryptoWaitReady } = require('@polkadot/util-crypto');\n\n// load the node address from .env\nconst { WSS_ADDRESS: address } = process.env\n\n// load actors for the workshop\nconst claimer = require('./claimer');\nconst attester = require('./attester');\nconst verifier = require('./verifier');\n\nasync function main() {\n  // wait for the crypto library to be ready\n  await cryptoWaitReady();\n\n  // connect to the KILT wss node\n  await Kilt.init({ address });\n\n  // Claimer gets ctype from Attester\n  const ctypeJSON = await attester.getCtype();\n\n  // Claimer forms a claim for the ctype\n  const content = { name: 'Alice', age: 25 };\n  const claimJSON = await claimer.createClaim(ctypeJSON, content);\n\n  // Claimer creates an attestation request\n  const requestJSON = await claimer.createRequest(claimJSON);\n\n  // Claimer sends request to the Attester for approval or rejection\n  const credentialJSON = await attester.attestCredential(requestJSON);\n  if (!credentialJSON) throw Error('credential denied');\n\n  // Claimer gets a challenge from Verifier\n  const challenge = verifier.getChallenge();\n\n  // Claimer creates a signed presentation using credential and challenge\n  const presentationJSON = await claimer.createPresentation(credentialJSON, challenge);\n\n  // Claimer sends their presentation Verifier for processing\n  const isVerified = await verifier.verifyCredential(presentationJSON, challenge);\n\n  // presentation is verified or denied by the Verifier\n  if (isVerified) console.log('woohoo verified, workshop complete!');\n  else console.log('booo verification denied!');\n\n  // we can disconnect\n  await Kilt.disconnect();\n}\n\nmain().catch((e) => {\n  console.log('Error in the workshop!', e)\n  process.exit(1)\n})\n"}}]);