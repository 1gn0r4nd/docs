"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[447],{46793:function(t,e,n){n(67294),n(31736)},54552:function(t,e,n){n.r(e),n.d(e,{contentTitle:function(){return c},default:function(){return p},frontMatter:function(){return l},metadata:function(){return d},toc:function(){return u}});var a=n(83117),i=n(80102),s=(n(67294),n(3905)),o=n(31736),r=(n(46793),["components"]),l={id:"attestation",title:"\ud83e\uddfe Attestation"},c=void 0,d={unversionedId:"sdk/workshop/attestation",id:"sdk/workshop/attestation",title:"\ud83e\uddfe Attestation",description:"In this section, your Attester will receive and process a RequestForAttestation where you'll",source:"@site/docs/sdk/1-workshop/05-attestation.md",sourceDirName:"sdk/1-workshop",slug:"/sdk/workshop/attestation",permalink:"/docs/sdk/workshop/attestation",editUrl:"https://github.com/KILTprotocol/docs/edit/master/docs/sdk/1-workshop/05-attestation.md",tags:[],version:"current",sidebarPosition:5,frontMatter:{id:"attestation",title:"\ud83e\uddfe Attestation"},sidebar:"sdk",previous:{title:"Request an Attestation",permalink:"/docs/sdk/workshop/claimer/request"},next:{title:"\ud83e\udd1d Verification",permalink:"/docs/sdk/workshop/verification"}},u=[{value:"Attest a Claim",id:"attest-a-claim",children:[],level:2},{value:"Run",id:"run",children:[],level:2}],h={toc:u};function p(t){var e=t.components,n=(0,i.Z)(t,r);return(0,s.kt)("wrapper",(0,a.Z)({},h,n,{components:e,mdxType:"MDXLayout"}),(0,s.kt)("p",null,"In this section, your ",(0,s.kt)("span",{class:"label-role attester"},"Attester")," will receive and process a ",(0,s.kt)("inlineCode",{parentName:"p"},"RequestForAttestation")," where you'll"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"Attest or deny it;"),(0,s.kt)("li",{parentName:"ul"},"Store the attestation on the chain (more specifically only its hash, we'll get to that);"),(0,s.kt)("li",{parentName:"ul"},"Build the ",(0,s.kt)("inlineCode",{parentName:"li"},"Attestation")," object which will be send back to the ",(0,s.kt)("span",{class:"label-role claimer"},"Claimer"),".")),(0,s.kt)("h2",{id:"attest-a-claim"},"Attest a Claim"),(0,s.kt)("p",null,"The ",(0,s.kt)("inlineCode",{parentName:"p"},"attestClaim")," function first initialized all libraries, as always.\nAfter that we can load the account and DID of the ",(0,s.kt)("span",{class:"label-role attester"},"Attester"),".\nWhen everything is prepared, we can create an attestation using the request we received from the ",(0,s.kt)("span",{class:"label-role claimer"},"Claimer"),".\nThe attestation becomes valid once it is submitted to the chain."),(0,s.kt)(o.Z,{className:"language-js",title:"attester/attestClaim.ts",mdxType:"CodeBlock"},"import { config as envConfig } from 'dotenv'\n\nimport * as Kilt from '@kiltprotocol/sdk-js'\n\nimport { generateKeypairs } from './generateKeypairs'\nimport { generateRequest } from '../claimer/generateRequest'\nimport { getAccount } from './generateAccount'\nimport { getFullDid } from './generateDid'\n\nexport async function attestClaim(\n  request: Kilt.IRequestForAttestation\n): Promise<Kilt.IAttestation> {\n  // Init\n  await Kilt.init({ address: process.env.WSS_ADDRESS })\n\n  // load account & DID\n  const mnemonic = process.env.ATTESTER_MNEMONIC as string\n  const attesterDid = process.env.ATTESTER_DID_URI as string\n  const account = await getAccount(mnemonic)\n  const keystore = new Kilt.Did.DemoKeystore()\n  await generateKeypairs(keystore, mnemonic)\n  const fullDid = await getFullDid(\n    Kilt.Did.DidUtils.getIdentifierFromKiltDid(attesterDid)\n  )\n\n  // build the attestation object\n  const attestation = Kilt.Attestation.fromRequestAndDid(request, fullDid.did)\n\n  // check the request content and deny based on your business logic.\n  // e.g. verify age with other credentials (birth certificate, passport, ...)\n\n  // form tx and authorized extrinsic\n  const tx = await attestation.getStoreTx()\n  const extrinsic = await fullDid.authorizeExtrinsic(\n    tx,\n    keystore,\n    account.address\n  )\n\n  // write to chain\n  console.log('Attester -> submit attestation...')\n  await Kilt.BlockchainUtils.signAndSubmitTx(extrinsic, account, {\n    resolveOn: Kilt.BlockchainUtils.IS_FINALIZED,\n    reSign: true\n  })\n\n  return attestation\n}\n\nexport async function attestingFlow(): Promise<Kilt.ICredential> {\n  // first the claimer\n  const request = await generateRequest({\n    age: 27,\n    name: 'Mia Musterfrau'\n  })\n\n  // send the request to the attester \ud83d\udd4a\n\n  // the attester checks the attributes and issues an attestation\n  const attestation = await attestClaim(request)\n\n  // send the attestation back to the claimer \ud83d\udd4a\n\n  // build the credential and return it\n  const credential = Kilt.Credential.fromRequestAndAttestation(\n    request,\n    attestation\n  )\n\n  return credential\n}\n\n// don't execute if this is imported by another file\nif (require.main === module) {\n  envConfig()\n  attestingFlow()\n    .catch((e) => {\n      console.log('Error while going throw attesting workflow', e)\n      process.exit(1)\n    })\n    .then((c) => {\n      console.log('The claimer build their credential and now has to store it.')\n      console.log('\u26a0\ufe0f  add the following to your .env file. \u26a0\ufe0f')\n      console.log(`CLAIMER_CREDENTIAL='${JSON.stringify(c)}'`)\n      process.exit()\n    })\n}\n"),(0,s.kt)("p",null,"The function ",(0,s.kt)("inlineCode",{parentName:"p"},"attestingFlow")," shows the process from the beginning to the end.\nFirst the ",(0,s.kt)("span",{class:"label-role claimer"},"Claimer")," generates the request and sends it to the ",(0,s.kt)("span",{class:"label-role attester"},"Attester"),".\nAfter that the ",(0,s.kt)("span",{class:"label-role attester"},"Attester")," checks the attributes and either issues an attestation or denies the attestation because the attributes are invalid.\nOnce the attestation is written on the chain and sent back to the ",(0,s.kt)("span",{class:"label-role claimer"},"Claimer"),", they can build a credential from the request they send and the attestation they received."),(0,s.kt)("h2",{id:"run"},"Run"),(0,s.kt)("p",null,"run it from command line:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},"yarn ts-node attester/attestClaim.ts\n")),(0,s.kt)("p",null,"You can copy the ",(0,s.kt)("inlineCode",{parentName:"p"},"Credential")," object if you want to test with other ",(0,s.kt)("inlineCode",{parentName:"p"},"Verifiers")," in the workshop :-)"),(0,s.kt)("p",null,"Your job as an ",(0,s.kt)("span",{class:"label-role attester"},"Attester")," is done: you've successfully attested a claim, written the attestation hash onto the chain, and prepared the ",(0,s.kt)("inlineCode",{parentName:"p"},"Credential")," object for the ",(0,s.kt)("span",{class:"label-role claimer"},"Claimer"),"."),(0,s.kt)("p",null,"Let's move on to setup our ",(0,s.kt)("span",{class:"label-role verifier"},"Verifier"),"!"))}p.isMDXComponent=!0}}]);