"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[9277],{3905:function(e,t,r){r.d(t,{Zo:function(){return c},kt:function(){return f}});var n=r(67294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function a(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},i=Object.keys(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var l=n.createContext({}),p=function(e){var t=n.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):a(a({},t),e)),r},c=function(e){var t=p(e.components);return n.createElement(l.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},u=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,i=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),u=p(r),f=o,m=u["".concat(l,".").concat(f)]||u[f]||d[f]||i;return r?n.createElement(m,a(a({ref:t},c),{},{components:r})):n.createElement(m,a({ref:t},c))}));function f(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=r.length,a=new Array(i);a[0]=u;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:o,a[1]=s;for(var p=2;p<i;p++)a[p]=r[p];return n.createElement.apply(null,a)}return n.createElement.apply(null,r)}u.displayName="MDXCreateElement"},59169:function(e,t,r){r.r(t),r.d(t,{frontMatter:function(){return s},contentTitle:function(){return l},metadata:function(){return p},toc:function(){return c},default:function(){return u}});var n=r(83117),o=r(80102),i=(r(67294),r(3905)),a=["components"],s={id:"request",title:"Verifier Requests a Credential"},l=void 0,p={unversionedId:"develop/dApp/verifier/request",id:"develop/dApp/verifier/request",title:"Verifier Requests a Credential",description:"The job of the verifier is to request and verify credentials. Your verifier can request one or more credentials of a specific CType. For example, if you want to verify an email credential, you would use the email CType:",source:"@site/docs/develop/07_dApp/04_verifier/02_requestCredential.md",sourceDirName:"develop/07_dApp/04_verifier",slug:"/develop/dApp/verifier/request",permalink:"/docs/develop/dApp/verifier/request",editUrl:"https://github.com/KILTprotocol/docs/edit/master/docs/develop/07_dApp/04_verifier/02_requestCredential.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{id:"request",title:"Verifier Requests a Credential"},sidebar:"dApp",previous:{title:"Overview",permalink:"/docs/develop/dApp/verifier/welcome"},next:{title:"Verifier Verifies a Credential",permalink:"/docs/develop/dApp/verifier/verify"}},c=[],d={toc:c};function u(e){var t=e.components,r=(0,o.Z)(e,a);return(0,i.kt)("wrapper",(0,n.Z)({},d,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"The job of the verifier is to request and verify credentials. Your verifier can request one or more credentials of a specific CType. For example, if you want to verify an email credential, you would use the email CType:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"const emailCType = CType.fromCType({\n  schema: {\n    $schema: 'http://kilt-protocol.org/draft-01/ctype#',\n    title: 'Email',\n    properties: {\n      Email: {\n        type: 'string',\n      },\n    },\n    type: 'object',\n    $id: 'kilt:ctype:0x3291bb126e33b4862d421bfaa1d2f272e6cdfc4f96658988fbcffea8914bd9ac',\n  },\n  owner: null,\n  hash: '0x3291bb126e33b4862d421bfaa1d2f272e6cdfc4f96658988fbcffea8914bd9ac',\n})\n")),(0,i.kt)("p",null,"First, generate a request challenge and store it on the server side:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"import { randomAsHex } from '@polkadot/util-crypto'\n\n// store somewhere in the backend\nconst requestChallenge = randomAsHex(24)\n")),(0,i.kt)("p",null,"Then construct the ",(0,i.kt)("inlineCode",{parentName:"p"},"REQUEST_CREDENTIAL")," message using the message body, sender DID and receiver DID:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"import { MessageBodyType } from '@kiltprotocol/types'\nimport { Message } from '@kiltprotocol/messaging'\nimport { Utils } from '@kiltprotocol/did'\n\nconst messageBody = {\n  content: {\n    cTypes: [{ cTypeHash: emailCType.hash }],\n    challenge: requestChallenge,\n  },\n  type: MessageBodyType.REQUEST_CREDENTIAL,\n}\n\nconst did = 'did:kilt:example'\nconst { did: receiverDid } = Utils.parseDidUri(encryptionKeyUri)\n\nconst message = new Message(messageBody, did, receiverDid)\n")),(0,i.kt)("p",null,"Next, encrypt the message:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"const fullDid = await FullDidDetails.fromChainInfo(did)\n\nconst encryptedMessage = message.encrypt(\n  fullDid.encryptionKey.id,\n  fullDid,\n  encryptionKeystore,\n  session.encryptionKeyUri\n)\n")),(0,i.kt)("p",null,"Finally, send the encrypted message to the extension:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"await session.send(encryptedMessage)\n")))}u.isMDXComponent=!0}}]);