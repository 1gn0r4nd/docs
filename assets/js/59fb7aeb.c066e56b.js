"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[7602],{63450:function(e,t,n){n.r(t),n.d(t,{assets:function(){return l},contentTitle:function(){return s},default:function(){return d},frontMatter:function(){return r},metadata:function(){return c},toc:function(){return u}});var o=n(83117),a=(n(67294),n(3905)),i=n(90814);const r={id:"account",title:"Account"},s=void 0,c={unversionedId:"develop/workshop/attester/account",id:"develop/workshop/attester/account",title:"Account",description:"After you have setup the project structure in the last step, we'll create our Attester account.",source:"@site/docs/develop/03_workshop/04_attester/01_account.md",sourceDirName:"develop/03_workshop/04_attester",slug:"/develop/workshop/attester/account",permalink:"/docs/develop/workshop/attester/account",draft:!1,editUrl:"https://github.com/KILTprotocol/docs/edit/master/docs/develop/03_workshop/04_attester/01_account.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{id:"account",title:"Account"},sidebar:"workshop",previous:{title:"\ud83c\udfe2 Attester",permalink:"/docs/develop/workshop/attester/"},next:{title:"DID",permalink:"/docs/develop/workshop/attester/did"}},l={},u=[{value:"Create the Account",id:"create-the-account",level:2},{value:"Execute",id:"execute",level:2}],p={toc:u};function d(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,o.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"After you have ",(0,a.kt)("a",{parentName:"p",href:"./"},"setup the project structure")," in the last step, we'll create our ",(0,a.kt)("span",{className:"label-role attester"},"Attester")," account.\nIn KILT, there is an account which is an object that interacts with the blockchain.\nAn account contains multiple properties.\nOne of them is the ",(0,a.kt)("inlineCode",{parentName:"p"},"address"),": it's the entity's unique and public on-chain identifier, that is used to pay fees and deposits.\nAll we need to create an account is a mnemonic."),(0,a.kt)("admonition",{title:"KILT Account",type:"info"},(0,a.kt)("p",{parentName:"admonition"},"A KILT account is a set of cryptographic elements:"),(0,a.kt)("ul",{parentName:"admonition"},(0,a.kt)("li",{parentName:"ul"},"The address, which is generated from the public key"),(0,a.kt)("li",{parentName:"ul"},"A signing keypair to write transactions on-chain"))),(0,a.kt)("admonition",{title:"mnemonic",type:"info"},(0,a.kt)("p",{parentName:"admonition"},"In cryptography, a mnemonic usually consists of 12 or 24 random series of words.\nFor example, ",(0,a.kt)("inlineCode",{parentName:"p"},"gold upset segment cake universe")," is a mnemonic.\nIt's used to generate signing keypairs.\nWhat's great about a mnemonic is that it's ",(0,a.kt)("strong",{parentName:"p"},"human-readable"),".\nA person can memorize it, and use it later to re-generate their keypairs and address.")),(0,a.kt)("h2",{id:"create-the-account"},"Create the Account"),(0,a.kt)("p",null,"To generate an account, one method from the KILT SDK is needed and one method from the polkadot crypto utility:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"mnemonicGenerate()")," - Generates a mnemonic"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"addFromMnemonic(mnemonic)")," - takes a mnemonic as an input, and outputs an ",(0,a.kt)("inlineCode",{parentName:"li"},"Account")," instance.")),(0,a.kt)("p",null,"Open ",(0,a.kt)("inlineCode",{parentName:"p"},"attester/generateAccount.ts")," and paste the following code:"),(0,a.kt)(i.Z,{className:"language-ts",title:"attester/generateAccount.ts",mdxType:"CodeBlock"},"import { config as envConfig } from 'dotenv'\n\nimport { mnemonicGenerate } from '@polkadot/util-crypto'\n\nimport * as Kilt from '@kiltprotocol/sdk-js'\n\nexport async function generateAccount(): Promise<{\n  account: Kilt.KeyringPair\n  mnemonic: string\n}> {\n  await Kilt.init({ address: process.env.WSS_ADDRESS })\n\n  // setup keyring\n  const keyring = new Kilt.Utils.Keyring({\n    ss58Format: 38,\n    type: 'sr25519'\n  })\n\n  // use the mnemonic from .env or make a new one\n  const mnemonic = mnemonicGenerate()\n  const account = keyring.addFromMnemonic(mnemonic)\n\n  // save the mnemonic and address in .env to we keep the same account\n  return { account, mnemonic }\n}\n\nexport async function getAccount(mnemonic: string): Promise<Kilt.KeyringPair> {\n  await Kilt.init({ address: process.env.WSS_ADDRESS })\n  const keyring = new Kilt.Utils.Keyring({\n    ss58Format: 38,\n    type: 'sr25519'\n  })\n  return keyring.addFromMnemonic(mnemonic)\n}\n\n// don't execute if this is imported by another file\nif (require.main === module) {\n  envConfig()\n  generateAccount()\n    .catch((e) => {\n      console.log('Error while setting up attester account', e)\n      process.exit(1)\n    })\n    .then(({ mnemonic, account }) => {\n      console.log('save to mnemonic and address to .env to continue!\\n\\n')\n      console.log(`ATTESTER_MNEMONIC=\"${mnemonic}\"`)\n      console.log(`ATTESTER_ADDRESS=${account.address}\\n\\n`)\n    })\n}\n"),(0,a.kt)("p",null,"The code contains two methods.\n",(0,a.kt)("inlineCode",{parentName:"p"},"generateAccount")," creates and returns a new account while ",(0,a.kt)("inlineCode",{parentName:"p"},"getAccount")," loads an existing secret and creates an account from it.\nWe will use ",(0,a.kt)("inlineCode",{parentName:"p"},"getAccount")," later to load the account that we will create and store in the next step."),(0,a.kt)("h2",{id:"execute"},"Execute"),(0,a.kt)("p",null,"Now run it to get your ",(0,a.kt)("span",{className:"label-role attester"},"Attester")," ",(0,a.kt)("inlineCode",{parentName:"p"},"<address>")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"<mnenomic>"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"yarn ts-node ./attester/generateAccount.ts\n")),(0,a.kt)("p",null,"Your output will provide you with ",(0,a.kt)("inlineCode",{parentName:"p"},"ATTESTER_MNEMONIC")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"ATTESTER_ADDRESS"),".\nBe sure to save it in your ",(0,a.kt)("inlineCode",{parentName:"p"},".env")," file, it should now look similar to this."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-env",metastring:'title=".env"',title:'".env"'},'WSS_ADDRESS=wss://peregrine.kilt.io/parachain-public-ws\n\nATTESTER_MNEMONIC="warrior icon use cry..."\nATTESTER_ADDRESS="4ohMvUHsyeDhMVZF..."\n')),(0,a.kt)("admonition",{title:"Get PILT coins!",type:"warning"},(0,a.kt)("p",{parentName:"admonition"},"You now have a blockchain account, which will be used to pay fees and deposits.\nIf you haven't already requested PILT, go to the ",(0,a.kt)("a",{parentName:"p",href:"https://faucet.peregrine.kilt.io"},"faucet")," and request tokens for your ",(0,a.kt)("inlineCode",{parentName:"p"},"<address>"),".")))}d.isMDXComponent=!0}}]);