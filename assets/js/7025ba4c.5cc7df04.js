"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[779],{97008:function(e,t,n){n.r(t),n.d(t,{assets:function(){return p},contentTitle:function(){return c},default:function(){return k},frontMatter:function(){return a},metadata:function(){return s},toc:function(){return l}});var o=n(83117),i=(n(67294),n(3905)),r=n(90814);const a={id:"ctype-creation",title:"Create a CType"},c=void 0,s={unversionedId:"develop/sdk/cookbook/claiming/ctype-creation",id:"develop/sdk/cookbook/claiming/ctype-creation",title:"Create a CType",description:"The creation of a CType in KILT involves two steps: the definition of a CType and the anchoring of its hash on the KILT blockchain.",source:"@site/docs/develop/01_sdk/02_cookbook/04_claiming/01_ctype_creation.md",sourceDirName:"develop/01_sdk/02_cookbook/04_claiming",slug:"/develop/sdk/cookbook/claiming/ctype-creation",permalink:"/docs/develop/sdk/cookbook/claiming/ctype-creation",draft:!1,editUrl:"https://github.com/KILTprotocol/docs/edit/master/docs/develop/01_sdk/02_cookbook/04_claiming/01_ctype_creation.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{id:"ctype-creation",title:"Create a CType"},sidebar:"sdk",previous:{title:"Unlink an Account From a KILT DID",permalink:"/docs/develop/sdk/cookbook/account_linking/account-unlink"},next:{title:"Request an Attestation",permalink:"/docs/develop/sdk/cookbook/claiming/attestation-request"}},p={},l=[],d={toc:l};function k(e){let{components:t,...n}=e;return(0,i.kt)("wrapper",(0,o.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"The creation of a CType in KILT involves two steps: the definition of a CType and the anchoring of its hash on the KILT blockchain."),(0,i.kt)("admonition",{type:"info"},(0,i.kt)("p",{parentName:"admonition"},"The creator of a CType is required to have a full DID with an attestation key.\nTo see how to manage DIDs, please refer to the ",(0,i.kt)("a",{parentName:"p",href:"/docs/develop/sdk/cookbook/dids/full-did-update"},"DID section"),".")),(0,i.kt)("p",null,"The following snippets show how:"),(0,i.kt)(r.Z,{className:"language-ts",mdxType:"CodeBlock"},"import type { KeyringPair } from '@polkadot/keyring/types'\n\nimport * as Kilt from '@kiltprotocol/sdk-js'\n\nexport async function createDriversLicenseCType(\n  keystore: Kilt.Did.DemoKeystore,\n  creatorDid: Kilt.Did.FullDidDetails,\n  submitterAccount: KeyringPair,\n  resolveOn: Kilt.SubscriptionPromise.ResultEvaluator = Kilt.BlockchainUtils\n    .IS_FINALIZED\n): Promise<Kilt.CType> {\n  // Create a new CType definition.\n  const ctype = Kilt.CType.fromSchema({\n    $schema: 'http://kilt-protocol.org/draft-01/ctype#',\n    title: `Drivers License by ${creatorDid.uri}`,\n    properties: {\n      name: {\n        type: 'string'\n      },\n      age: {\n        type: 'integer'\n      },\n      id: {\n        type: 'string'\n      }\n    },\n    type: 'object'\n  })\n\n  // Generate a creation extrinsic and sign it with the attester's attestation key.\n  const ctypeCreationTx = await ctype\n    .getStoreTx()\n    .then((tx) =>\n      creatorDid.authorizeExtrinsic(tx, keystore, submitterAccount.address)\n    )\n  // Submit the creation extrinsic to the KILT blockchain\n  // using the KILT account specified in the creation operation.\n  await Kilt.BlockchainUtils.signAndSubmitTx(\n    ctypeCreationTx,\n    submitterAccount,\n    { resolveOn }\n  )\n\n  return ctype\n}\n"),(0,i.kt)("admonition",{type:"note"},(0,i.kt)("p",{parentName:"admonition"},"The creation of a new CType requires the CType hash to be unique.\nBefore writing a new CType, Attesters should check whether there is already an existing CType which matches their requirements.\nVisit our ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/KILTprotocol/ctype-index"},"CType index repository")," for a non-exhaustive list of existing CTypes.")))}k.isMDXComponent=!0}}]);