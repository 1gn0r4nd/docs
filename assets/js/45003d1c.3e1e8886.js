"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[543],{6793:function(e,t,n){n(7294),n(1736)},6852:function(e,t,n){n.r(t),n.d(t,{contentTitle:function(){return c},default:function(){return p},frontMatter:function(){return l},metadata:function(){return m},toc:function(){return d}});var a=n(3117),i=n(102),s=(n(7294),n(3905)),r=n(1736),o=(n(6793),["components"]),l={id:"request",title:"Request an Attestation"},c=void 0,m={unversionedId:"sdk/workshop/claimer/request",id:"sdk/workshop/claimer/request",title:"Request an Attestation",description:"In this section, we'll create a Claim and a RequestForAttestation.",source:"@site/docs/sdk/1-workshop/04-claimer/02-request.md",sourceDirName:"sdk/1-workshop/04-claimer",slug:"/sdk/workshop/claimer/request",permalink:"/docs/sdk/workshop/claimer/request",editUrl:"https://github.com/KILTprotocol/docs/edit/master/docs/sdk/1-workshop/04-claimer/02-request.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{id:"request",title:"Request an Attestation"},sidebar:"sdk",previous:{title:"DID",permalink:"/docs/sdk/workshop/claimer/did"},next:{title:"\ud83e\uddfe Attestation",permalink:"/docs/sdk/workshop/attestation"}},d=[{value:"Create Claim",id:"create-claim",children:[],level:2},{value:"Create Request",id:"create-request",children:[],level:2},{value:"Run",id:"run",children:[],level:2}],u={toc:d};function p(e){var t=e.components,n=(0,i.Z)(e,o);return(0,s.kt)("wrapper",(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("p",null,"In this section, we'll create a ",(0,s.kt)("inlineCode",{parentName:"p"},"Claim")," and a ",(0,s.kt)("inlineCode",{parentName:"p"},"RequestForAttestation"),".\nBut a claim in itself has no value.\nTo become valid in the eyes of ",(0,s.kt)("span",{class:"label-role verifier"},"Verifiers"),", it needs to be attested by an entity they can trust: an ",(0,s.kt)("span",{class:"label-role attester"},"Attester"),"."),(0,s.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,s.kt)("div",{parentName:"div",className:"admonition-heading"},(0,s.kt)("h5",{parentName:"div"},(0,s.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,s.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,s.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"info")),(0,s.kt)("div",{parentName:"div",className:"admonition-content"},(0,s.kt)("p",{parentName:"div"}," KILT is an open system.\nAnyone/anything can make a claim about themselves and attest this claim. But a claim only has value if the verifier ",(0,s.kt)("em",{parentName:"p"},"trusts")," the attester."))),(0,s.kt)("h2",{id:"create-claim"},"Create Claim"),(0,s.kt)("p",null,"We'll use provided ",(0,s.kt)("inlineCode",{parentName:"p"},"light DID"),", ",(0,s.kt)("inlineCode",{parentName:"p"},"ctype")," and ",(0,s.kt)("span",{class:"label-role claimer"},"Claimer")," provided ",(0,s.kt)("inlineCode",{parentName:"p"},"content")," to generate the ",(0,s.kt)("inlineCode",{parentName:"p"},"Claim")," object.\nCreate a file ",(0,s.kt)("inlineCode",{parentName:"p"},"claimer/createClaim.ts")," and copy the code below."),(0,s.kt)(r.Z,{className:"language-js",title:"claimer/createClaim.ts",mdxType:"CodeBlock"},"import * as Kilt from '@kiltprotocol/sdk-js'\n\n// create a Claim object from lightDid, ctype and given content\nexport function createClaim(\n  lightDid: Kilt.Did.LightDidDetails,\n  ctype: Kilt.CType,\n  content: Kilt.IClaim['contents']\n): Kilt.IClaim {\n  const claim = Kilt.Claim.fromCTypeAndClaimContents(\n    ctype,\n    content,\n    lightDid.did\n  )\n\n  return claim\n}\n"),(0,s.kt)("p",null,"The magic is happening in the ",(0,s.kt)("inlineCode",{parentName:"p"},"createRequest")," function.\nThere we create a request for attestation from a claim.\nAttestations can only be created for attributes that the ",(0,s.kt)("span",{class:"label-role claimer"},"Claimer")," wants to publish.\nTo ensure that the claimer also approves of the attributes in the claim, he has to digitally sign the request for attestation.\nThe signature makes sure that the attester doesn't change the attributes and the attestation is created for the agreed values."),(0,s.kt)("p",null,"The ",(0,s.kt)("inlineCode",{parentName:"p"},"main")," function puts it all together.\nThere we load our light DID, create a claim and finally the request for attestation."),(0,s.kt)("h2",{id:"create-request"},"Create Request"),(0,s.kt)("p",null,"A claim is composed of attributes that we claim to be true about us.\nSince we want to receive an attestation for that claim, we build a ",(0,s.kt)("inlineCode",{parentName:"p"},"RequestForAttestation"),".\nThe request contains all necessary information, so that the ",(0,s.kt)("span",{class:"label-role attester"},"Attester")," can create an attestation for us.\nCreate a file ",(0,s.kt)("inlineCode",{parentName:"p"},"claimer/generateRequest.ts")," and copy the code below."),(0,s.kt)(r.Z,{className:"language-js",title:"claimer/generateRequest.ts",mdxType:"CodeBlock"},"import { config as envConfig } from 'dotenv'\n\nimport * as Kilt from '@kiltprotocol/sdk-js'\n\nimport { createClaim } from './createClaim'\nimport { getCtypeSchema } from '../attester/ctypeSchema'\nimport { generateKeypairs } from './generateKeypairs'\n\n// create and return a RequestForAttestation from claim\nasync function requestFromClaim(\n  lightDid: Kilt.Did.LightDidDetails,\n  keystore: Kilt.Did.DemoKeystore,\n  claim: Kilt.IClaim\n): Promise<Kilt.IRequestForAttestation> {\n  const request = Kilt.RequestForAttestation.fromClaim(claim)\n  await request.signWithDidKey(\n    keystore,\n    lightDid,\n    lightDid.authenticationKey.id\n  )\n\n  return request\n}\n\nexport async function generateRequest(\n  claimAttributes: Kilt.IClaim['contents']\n): Promise<Kilt.IRequestForAttestation> {\n  // init\n  await Kilt.init({ address: process.env.WSS_ADDRESS })\n\n  const keystore = new Kilt.Did.DemoKeystore()\n  const keys = await generateKeypairs(keystore, process.env.CLAIMER_MNEMONIC)\n\n  // create the DID\n  const lightDid = Kilt.Did.LightDidDetails.fromDetails({\n    ...keys,\n    authenticationKey: {\n      publicKey: keys.authenticationKey.publicKey,\n      type: Kilt.VerificationKeyType.Sr25519\n    }\n  })\n\n  // create claim\n  const ctype = getCtypeSchema()\n  const claim = await createClaim(lightDid, ctype, claimAttributes)\n\n  // create request\n  console.log('claimer -> create request')\n  return await requestFromClaim(lightDid, keystore, claim)\n}\n\n// don't execute if this is imported by another file\nif (require.main === module) {\n  envConfig()\n  generateRequest({\n    age: 28,\n    name: 'Max Mustermann'\n  })\n    .catch((e) => {\n      console.log('Error while building request for attestation', e)\n      process.exit(1)\n    })\n    .then((request) => {\n      console.log(\n        '\u26a0\ufe0f  save this to ./claimer/_request.json for testing  \u26a0\ufe0f\\n\\n'\n      )\n      console.log(JSON.stringify(request, null, 2))\n      process.exit()\n    })\n}\n"),(0,s.kt)("p",null,"When ",(0,s.kt)("inlineCode",{parentName:"p"},"Attestations")," are given by ",(0,s.kt)("span",{class:"label-role attester"},"Attesters"),", they are written to chain which requires a deposit. Each new ",(0,s.kt)("inlineCode",{parentName:"p"},"RequestForAttestation")," is unique. While we're testing, we can store and reuse requests to avoid\nmultiple attestations. To do this store the output into ",(0,s.kt)("inlineCode",{parentName:"p"},"./claimer/_request.json"),". You can also share this\nrequest with others in the workshop to see how they get denied from fraudulent senders."),(0,s.kt)("h2",{id:"run"},"Run"),(0,s.kt)("p",null,"Run it from command line:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},"yarn ts-node claimer/generateRequest.ts\n")),(0,s.kt)("p",null,"OK, you've made a claim as a ",(0,s.kt)("span",{class:"label-role claimer"},"Claimer")," and\ncreated a request for attestation. Let's finish up our ",(0,s.kt)("span",{class:"label-role attester"},"Attester")," and get a credential!"))}p.isMDXComponent=!0}}]);