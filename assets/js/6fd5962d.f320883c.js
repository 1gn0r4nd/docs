"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[8275],{72285:function(e,t,i){i.r(t),i.d(t,{assets:function(){return u},contentTitle:function(){return l},default:function(){return p},frontMatter:function(){return a},metadata:function(){return s},toc:function(){return r}});var n=i(83117),o=(i(67294),i(3905)),d=i(90814);const a={id:"full-did-update",title:"Update a Full DID"},l=void 0,s={unversionedId:"develop/sdk/cookbook/dids/full-did-update",id:"develop/sdk/cookbook/dids/full-did-update",title:"Update a Full DID",description:"Once anchored to the KILT blockchain, a full DID can be updated.",source:"@site/docs/develop/01_sdk/02_cookbook/01_dids/03_full_did_update.md",sourceDirName:"develop/01_sdk/02_cookbook/01_dids",slug:"/develop/sdk/cookbook/dids/full-did-update",permalink:"/docs/develop/sdk/cookbook/dids/full-did-update",draft:!1,editUrl:"https://github.com/KILTprotocol/docs/edit/master/docs/develop/01_sdk/02_cookbook/01_dids/03_full_did_update.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{id:"full-did-update",title:"Update a Full DID"},sidebar:"sdk",previous:{title:"Create a Full DID",permalink:"/docs/develop/sdk/cookbook/dids/full-did-creation"},next:{title:"Sign Extrinsics with a Full DID",permalink:"/docs/develop/sdk/cookbook/dids/full-did-batch"}},u={},r=[],c={toc:r};function p(e){let{components:t,...i}=e;return(0,o.kt)("wrapper",(0,n.Z)({},c,i,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"Once anchored to the KILT blockchain, a full DID can be updated.\nFor instance, the following snippet shows how to use the ",(0,o.kt)("inlineCode",{parentName:"p"},"FullDidUpdateBuilder")," to update the authentication key to a new ",(0,o.kt)("inlineCode",{parentName:"p"},"ed25519")," key and remove a service endpoint for a full DID."),(0,o.kt)(d.Z,{className:"language-ts",mdxType:"CodeBlock"},"import type { KeyringPair } from '@polkadot/keyring/types'\n\nimport { ApiPromise } from '@polkadot/api'\n\nimport * as Kilt from '@kiltprotocol/sdk-js'\n\nexport async function updateFullDid(\n  keystore: Kilt.Did.DemoKeystore,\n  api: ApiPromise,\n  submitterAccount: KeyringPair,\n  fullDid: Kilt.Did.FullDidDetails,\n  resolveOn: Kilt.SubscriptionPromise.ResultEvaluator = Kilt.BlockchainUtils\n    .IS_FINALIZED\n): Promise<Kilt.Did.FullDidDetails> {\n  // Ask the keystore to generate a new keypair to use for authentication.\n  // With no seed specified, a random one will be used.\n  const newAuthenticationKeyPublicDetails = await keystore.generateKeypair({\n    alg: Kilt.Did.SigningAlgorithms.Ed25519\n  })\n\n  // Create and sign the DID operation to replace the authentication key with the new one generated.\n  // This results in an unsigned extrinsic that can be then signed and submitted to the KILT blockchain by the account\n  // authorized in this operation, Alice in this case.\n  const didUpdateExtrinsic = await new Kilt.Did.FullDidUpdateBuilder(\n    api,\n    fullDid\n  )\n    .setAuthenticationKey({\n      publicKey: newAuthenticationKeyPublicDetails.publicKey,\n      type: Kilt.VerificationKeyType.Ed25519\n    })\n    .removeServiceEndpoint('my-service')\n    .build(keystore, submitterAccount.address)\n\n  // Submit the DID update tx to the KILT blockchain after signing it with the authorized KILT account.\n  await Kilt.BlockchainUtils.signAndSubmitTx(\n    didUpdateExtrinsic,\n    submitterAccount,\n    {\n      resolveOn\n    }\n  )\n\n  // Get the updated DID Doc\n  const updatedDidDetails = await Kilt.Did.FullDidDetails.fromChainInfo(\n    fullDid.uri\n  )\n\n  if (!updatedDidDetails) {\n    throw `Could not find the updated DID ${fullDid.uri}`\n  }\n  return updatedDidDetails\n}\n"))}p.isMDXComponent=!0}}]);