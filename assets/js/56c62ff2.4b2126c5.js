"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[148],{9877:function(e,t,n){n.d(t,{Z:function(){return d}});var r=n(3117),a=n(7294),i=n(2389),o=n(4726),l=n(6010),s="tabItem_LplD";function c(e){var t,n,i,c=e.lazy,d=e.block,u=e.defaultValue,p=e.values,m=e.groupId,h=e.className,k=a.Children.map(e.children,(function(e){if((0,a.isValidElement)(e)&&void 0!==e.props.value)return e;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof e.type?e.type:e.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})),f=null!=p?p:k.map((function(e){var t=e.props;return{value:t.value,label:t.label,attributes:t.attributes}})),v=(0,o.lx)(f,(function(e,t){return e.value===t.value}));if(v.length>0)throw new Error('Docusaurus error: Duplicate values "'+v.map((function(e){return e.value})).join(", ")+'" found in <Tabs>. Every value needs to be unique.');var b=null===u?u:null!=(t=null!=u?u:null==(n=k.find((function(e){return e.props.default})))?void 0:n.props.value)?t:null==(i=k[0])?void 0:i.props.value;if(null!==b&&!f.some((function(e){return e.value===b})))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+b+'" but none of its children has the corresponding value. Available values are: '+f.map((function(e){return e.value})).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");var g=(0,o.UB)(),w=g.tabGroupChoices,y=g.setTabGroupChoices,N=(0,a.useState)(b),C=N[0],T=N[1],S=[],j=(0,o.o5)().blockElementScrollPositionUntilNextRender;if(null!=m){var x=w[m];null!=x&&x!==C&&f.some((function(e){return e.value===x}))&&T(x)}var I=function(e){var t=e.currentTarget,n=S.indexOf(t),r=f[n].value;r!==C&&(j(t),T(r),null!=m&&y(m,r))},D=function(e){var t,n=null;switch(e.key){case"ArrowRight":var r=S.indexOf(e.currentTarget)+1;n=S[r]||S[0];break;case"ArrowLeft":var a=S.indexOf(e.currentTarget)-1;n=S[a]||S[S.length-1]}null==(t=n)||t.focus()};return a.createElement("div",{className:"tabs-container"},a.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,l.Z)("tabs",{"tabs--block":d},h)},f.map((function(e){var t=e.value,n=e.label,i=e.attributes;return a.createElement("li",(0,r.Z)({role:"tab",tabIndex:C===t?0:-1,"aria-selected":C===t,key:t,ref:function(e){return S.push(e)},onKeyDown:D,onFocus:I,onClick:I},i,{className:(0,l.Z)("tabs__item",s,null==i?void 0:i.className,{"tabs__item--active":C===t})}),null!=n?n:t)}))),c?(0,a.cloneElement)(k.filter((function(e){return e.props.value===C}))[0],{className:"margin-vert--md"}):a.createElement("div",{className:"margin-vert--md"},k.map((function(e,t){return(0,a.cloneElement)(e,{key:t,hidden:e.props.value!==C})}))))}function d(e){var t=(0,i.Z)();return a.createElement(c,(0,r.Z)({key:String(t)},e))}},6793:function(e,t,n){var r=n(102),a=n(7294),i=n(1736),o=["children","snippets"];t.Z=function(e){var t=e.children,n=e.snippets,l=(0,r.Z)(e,o),s=t.split(/\r?\n/),c=n?JSON.parse(n).map((function(e){return Array.isArray(e)?s.slice(e[0],e[1]).join("\n"):e})).join("\n"):s.join("\n");return a.createElement(i.Z,l,c)}},8889:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return u},contentTitle:function(){return p},metadata:function(){return m},toc:function(){return h},default:function(){return v}});var r,a=n(3117),i=n(102),o=(n(7294),n(3905)),l=n(9877),s=(n(1736),n(6793)),c=n(6431),d=["components"],u={id:"setup",title:"\ud83c\udf92 Setup"},p=void 0,m={unversionedId:"sdk/workshop/setup",id:"sdk/workshop/setup",title:"\ud83c\udf92 Setup",description:"Node.js",source:"@site/docs/sdk/1-workshop/01-setup.md",sourceDirName:"sdk/1-workshop",slug:"/sdk/workshop/setup",permalink:"/docs/sdk/workshop/setup",editUrl:"https://github.com/KILTprotocol/docs/edit/master/docs/sdk/1-workshop/01-setup.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{id:"setup",title:"\ud83c\udf92 Setup"},sidebar:"sdk",previous:{title:"\ud83d\udc4b\ud83c\udffb Welcome",permalink:"/docs/sdk/workshop/welcome"},next:{title:"\ud83d\udc53 Overview",permalink:"/docs/sdk/workshop/overview"}},h=[{value:"Node.js",id:"nodejs",children:[],level:2},{value:"Project Folder",id:"project-folder",children:[],level:2},{value:"Dependencies",id:"dependencies",children:[],level:2},{value:"PILT Tokens",id:"pilt-tokens",children:[],level:2},{value:"Blockchain Connection",id:"blockchain-connection",children:[],level:2},{value:"Index",id:"index",children:[],level:2}],k=(r="TabItem",function(e){return console.warn("Component "+r+" was not imported, exported, or provided by MDXProvider as global scope"),(0,o.kt)("div",e)}),f={toc:h};function v(e){var t=e.components,n=(0,i.Z)(e,d);return(0,o.kt)("wrapper",(0,a.Z)({},f,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h2",{id:"nodejs"},"Node.js"),(0,o.kt)("p",null,"You need to have ",(0,o.kt)("a",{parentName:"p",href:"https://nodejs.org/"},"Node.js")," installed.\nAny stable (LTS >= 14.0) version is sufficient."),(0,o.kt)("h2",{id:"project-folder"},"Project Folder"),(0,o.kt)("p",null,"Create a new folder, named for example ",(0,o.kt)("inlineCode",{parentName:"p"},"kilt-rocks"),".\nCreate  ",(0,o.kt)("span",{class:"label-role attester"},"Attester"),",  ",(0,o.kt)("span",{class:"label-role claimer"},"Claimer"),",  ",(0,o.kt)("span",{class:"label-role verifier"},"Verifier")," folders.\nCreate ",(0,o.kt)("inlineCode",{parentName:"p"},".env")," and our main entry files ",(0,o.kt)("inlineCode",{parentName:"p"},"index.js"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"\u2514\u2500 kilt-rocks/ # project\n    \u251c\u2500 attester/ # all attester code\n    \u251c\u2500 claimer/ # all claimer code\n    \u251c\u2500 verifier/ # all verifier code\n    \u251c\u2500 .env # environment variables\n    \u2514\u2500 index.js # main entry file\n")),(0,o.kt)("h2",{id:"dependencies"},"Dependencies"),(0,o.kt)("p",null,"Navigate into your newly created folder ",(0,o.kt)("inlineCode",{parentName:"p"},"kilt-rocks"),", initialize the project and install dependencies.",(0,o.kt)("br",null)),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://github.com/KILTprotocol/sdk-js#readme"},"KILT SDK-JS")," - for KILT functionality"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://github.com/polkadot-js/common/tree/master/packages/util-crypto#readme"},"PolkadotJS Crypto-Utils")," - for a few crypto utilities"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://github.com/motdotla/dotenv#readme"},"dotenv")," - to help us load variables from ",(0,o.kt)("inlineCode",{parentName:"li"},".env"))),(0,o.kt)(l.Z,{groupId:"npm2yarn",mdxType:"Tabs"},(0,o.kt)(k,{value:"npm",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"npm init -y\nnpm install @kiltprotocol/sdk-js@0.25.2 @polkadot/util-crypto@8.3.3 dotenv\n"))),(0,o.kt)(k,{value:"yarn",label:"Yarn",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"yarn init -y\nyarn add @kiltprotocol/sdk-js@0.25.2 @polkadot/util-crypto@8.3.3 dotenv\n")))),(0,o.kt)("h2",{id:"pilt-tokens"},"PILT Tokens"),(0,o.kt)("p",null,"In this workshop you will interact with the Peregrine blockchain.\nYou are required to pay for each transaction with PILT coins.\nBut worry not!\nPILT coins don't have any value and can easily be requested through our communication channels (",(0,o.kt)("a",{parentName:"p",href:"https://matrix.to/#/%23kilt-general:matrix.org"},"Element")," and ",(0,o.kt)("a",{parentName:"p",href:"https://discord.gg/5VZnPdTZMy"},"Discord"),")."),(0,o.kt)("h2",{id:"blockchain-connection"},"Blockchain Connection"),(0,o.kt)("p",null,"Before you call any SDK functionality, you need to initialise the crypto libraries and configure the SDK.\nFor this workshop we'll be using ",(0,o.kt)("a",{parentName:"p",href:"https://polkadot.js.org/apps/?rpc=wss%3A%2F%2Fperegrine.kilt.io%2Fparachain-public-ws#/explorer"},"Peregrine Testnet"),".\nThis is done calling ",(0,o.kt)("inlineCode",{parentName:"p"},"await Kilt.init({ address })")," where ",(0,o.kt)("inlineCode",{parentName:"p"},"address")," is the address of the full node you want to connect to.\nFor this workshop use ",(0,o.kt)("inlineCode",{parentName:"p"},"wss://peregrine.kilt.io/parachain-public-ws"),".\nAdd the address to your ",(0,o.kt)("inlineCode",{parentName:"p"},".env")," file."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-env",metastring:'title=".env"',title:'".env"'},"WSS_ADDRESS=wss://peregrine.kilt.io/parachain-public-ws\n")),(0,o.kt)("h2",{id:"index"},"Index"),(0,o.kt)("p",null,"Finally, we'll setup our ",(0,o.kt)("inlineCode",{parentName:"p"},"index.js")," file.\nThis will be the main script we use to run through the workshop.\nCopy the code below, we'll go through it step by step later."),(0,o.kt)(s.Z,{title:"index.js",className:"language-js",snippets:'[ [0,10], [15,22], "  // magic will happen here\\n", [49,54] ]',mdxType:"SnippetBlock"},c.Z),(0,o.kt)("p",null,"That's it for the basic setup - We're good to go!"))}v.isMDXComponent=!0},6431:function(e,t){t.Z="// make environment variables available in process.env\nrequire('dotenv').config();\n\n// bring in dependencies\nconst Kilt = require('@kiltprotocol/sdk-js');\nconst { cryptoWaitReady } = require('@polkadot/util-crypto');\n\n// load the node address from .env\nconst { WSS_ADDRESS: address } = process.env\n\n// load actors for the workshop\nconst claimer = require('./claimer');\nconst attester = require('./attester');\nconst verifier = require('./verifier');\n\nasync function main() {\n  // wait for the crypto library to be ready\n  await cryptoWaitReady();\n\n  // connect to the KILT wss node\n  await Kilt.init({ address });\n\n  // Claimer gets ctype from Attester\n  const ctypeJSON = await attester.getCtype();\n\n  // Claimer forms a claim for the ctype\n  const content = { name: 'Alice', age: 25 };\n  const claimJSON = await claimer.createClaim(ctypeJSON, content);\n\n  // Claimer creates an attestation request\n  const requestJSON = await claimer.createRequest(claimJSON);\n\n  // Claimer sends request to the Attester for approval or rejection\n  const credentialJSON = await attester.attestCredential(requestJSON);\n  if (!credentialJSON) throw Error('credential denied'); \n\n  // Claimer gets a challenge from Verifier\n  const challenge = verifier.getChallenge();\n\n  // Claimer creates a signed presentation using credential and challenge\n  const presentationJSON = await claimer.createPresentation(credentialJSON, challenge);\n\n  // Claimer sends their presentation Verifier for processing\n  const isVerified = await verifier.verifyCredential(presentationJSON, challenge);\n\n  // presentation is verified or denied by the Verifier\n  if (isVerified) console.log('woohoo verified, workshop complete!');\n  else console.log('booo verification denied!');\n\n  // we can disconnect\n  await Kilt.disconnect();\n}\n\nmain();"}}]);