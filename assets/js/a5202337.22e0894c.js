"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[5005],{35590:function(e,t,i){i.r(t),i.d(t,{contentTitle:function(){return l},default:function(){return p},frontMatter:function(){return r},metadata:function(){return c},toc:function(){return u}});var n=i(83117),a=i(80102),o=(i(67294),i(3905)),s=i(31736),d=["components"],r={id:"did-signature",title:"Generate and Verify a DID Signature"},l=void 0,c={unversionedId:"develop/sdk/cookbook/dids/did-signature",id:"develop/sdk/cookbook/dids/did-signature",title:"Generate and Verify a DID Signature",description:"Beyond being used to authorize chain operations, both light and full DIDs have off-chain applications.",source:"@site/docs/develop/01_sdk/02_cookbook/01_dids/05_did_signature.md",sourceDirName:"develop/01_sdk/02_cookbook/01_dids",slug:"/develop/sdk/cookbook/dids/did-signature",permalink:"/docs/develop/sdk/cookbook/dids/did-signature",editUrl:"https://github.com/KILTprotocol/docs/edit/master/docs/develop/01_sdk/02_cookbook/01_dids/05_did_signature.md",tags:[],version:"current",sidebarPosition:5,frontMatter:{id:"did-signature",title:"Generate and Verify a DID Signature"},sidebar:"sdk",previous:{title:"Sign Extrinsics with a Full DID",permalink:"/docs/develop/sdk/cookbook/dids/full-did-batch"},next:{title:"Delete a Full DID",permalink:"/docs/develop/sdk/cookbook/dids/full-did-delete"}},u=[],h={toc:u};function p(e){var t=e.components,i=(0,a.Z)(e,d);return(0,o.kt)("wrapper",(0,n.Z)({},h,i,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"Beyond being used to authorize chain operations, both light and full DIDs have off-chain applications."),(0,o.kt)("p",null,"One of such applications is generating digital signatures.\nAs a DID can have multiple keys, in addition to the signature data itself, a DID signature contains information about the signer's DID and key used, so that Verifiers have all the information needed to resolve the DID from the KILT blockchain and use the right key to verify the generated signature."),(0,o.kt)("p",null,"The snippet below shows how to generate and verify a DID signature using the KILT SDK."),(0,o.kt)(s.Z,{className:"language-ts",mdxType:"CodeBlock"},"import * as Kilt from '@kiltprotocol/sdk-js'\n\nexport async function generateAndVerifyDidAuthenticationSignature(\n  keystore: Kilt.Did.DemoKeystore,\n  did: Kilt.Did.DidDetails,\n  payload: string | Uint8Array\n): Promise<void> {\n  // Generate a signature using the provided DID's authentication key.\n  const signature = await did.signPayload(\n    payload,\n    keystore,\n    did.authenticationKey.id\n  )\n\n  // Print the generated signature object.\n  console.log('Generated signature:')\n  console.log(JSON.stringify(signature, null, 2))\n\n  // Verify the validity of the signature using the DID's authentication public key.\n  const signatureVerificationResult =\n    await Kilt.Did.DidUtils.verifyDidSignature({\n      message: payload,\n      signature,\n      expectedVerificationMethod: Kilt.KeyRelationship.authentication\n    })\n\n  if (!signatureVerificationResult.verified) {\n    throw `Signature failed to verify. Reason: ${signatureVerificationResult.reason}`\n  }\n}\n"),(0,o.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,o.kt)("div",{parentName:"div",className:"admonition-heading"},(0,o.kt)("h5",{parentName:"div"},(0,o.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,o.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,o.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,o.kt)("div",{parentName:"div",className:"admonition-content"},(0,o.kt)("p",{parentName:"div"},"Notice that the snippet above takes a ",(0,o.kt)("inlineCode",{parentName:"p"},"DidDetails")," instance to generate the signature.\nThe ",(0,o.kt)("inlineCode",{parentName:"p"},"DidDetails")," class is an abstract class that both ",(0,o.kt)("inlineCode",{parentName:"p"},"LightDidDetails")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"FullDidDetails")," implement (more info ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/KILTprotocol/sdk-js/tree/master/packages/did/src/DidDetails"},"here"),").\nThis means that both light and full DIDs can generate signatures, and the KILT SDK implements the right verification logic depending on whether the signer is a light or a full DID."))))}p.isMDXComponent=!0}}]);