"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[741],{8312:function(e,t,n){n.r(t),n.d(t,{contentTitle:function(){return c},default:function(){return h},frontMatter:function(){return s},metadata:function(){return d},toc:function(){return p}});var i=n(3117),a=n(102),r=(n(7294),n(3905)),o=n(1736),l=["components"],s={id:"verification",title:"\ud83e\udd1d Verification"},c=void 0,d={unversionedId:"sdk/workshop/verification",id:"sdk/workshop/verification",title:"\ud83e\udd1d Verification",description:"In this section, you'll play the role of a Verifier:",source:"@site/docs/sdk/1-workshop/6-verification.md",sourceDirName:"sdk/1-workshop",slug:"/sdk/workshop/verification",permalink:"/docs/sdk/workshop/verification",editUrl:"https://github.com/KILTprotocol/docs/edit/master/docs/sdk/1-workshop/6-verification.md",tags:[],version:"current",sidebarPosition:6,frontMatter:{id:"verification",title:"\ud83e\udd1d Verification"},sidebar:"sdk",previous:{title:"\ud83e\uddfe Attestation",permalink:"/docs/sdk/workshop/attestation"},next:{title:"\ud83d\ude80 Done",permalink:"/docs/sdk/workshop/done"}},p=[{value:"Create Presentation",id:"create-presentation",children:[],level:2},{value:"Verify",id:"verify",children:[],level:2},{value:"Run",id:"run",children:[],level:2}],m={toc:p};function h(e){var t=e.components,n=(0,a.Z)(e,l);return(0,r.kt)("wrapper",(0,i.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"In this section, you'll play the role of a ",(0,r.kt)("span",{class:"label-role verifier"},"Verifier"),":"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"You'll take an ",(0,r.kt)("inlineCode",{parentName:"li"},"Presentation")," object given to you by a ",(0,r.kt)("span",{class:"label-role claimer"},"Claimer"),";"),(0,r.kt)("li",{parentName:"ul"},"You'll verify that its data is correct;"),(0,r.kt)("li",{parentName:"ul"},"You'll verify that the attestation is valid, i.e. its hash exists on-chain and the attestation has not been revoked."),(0,r.kt)("li",{parentName:"ul"},"You'll verify that the ",(0,r.kt)("inlineCode",{parentName:"li"},"Credential")," is owned by the ",(0,r.kt)("span",{class:"label-role claimer"},"Claimer")," sending it")),(0,r.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,r.kt)("div",{parentName:"div",className:"admonition-heading"},(0,r.kt)("h5",{parentName:"div"},(0,r.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,r.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,r.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"Credential")),(0,r.kt)("div",{parentName:"div",className:"admonition-content"},(0,r.kt)("p",{parentName:"div"},"A ",(0,r.kt)("inlineCode",{parentName:"p"},"Credential")," object is also called an Attested Claim: It is what ",(0,r.kt)("span",{class:"label-role claimer"},"claimers")," need to create ",(0,r.kt)("inlineCode",{parentName:"p"},"Presentations"),"."))),(0,r.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,r.kt)("div",{parentName:"div",className:"admonition-heading"},(0,r.kt)("h5",{parentName:"div"},(0,r.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,r.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,r.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"Presentation")),(0,r.kt)("div",{parentName:"div",className:"admonition-content"},(0,r.kt)("p",{parentName:"div"},"A credential is used to create the ",(0,r.kt)("inlineCode",{parentName:"p"},"Presentation")," object by the ",(0,r.kt)("span",{class:"label-role claimer"},"claimer"),".\nUnlike the credential, a ",(0,r.kt)("inlineCode",{parentName:"p"},"Presentation")," can hide some attributes that are not required by the ",(0,r.kt)("span",{class:"label-role verifier"},"verifiers"),".\nA ",(0,r.kt)("inlineCode",{parentName:"p"},"Presentation")," also contains a prove that the ",(0,r.kt)("span",{class:"label-role claimer"},"claimer")," owns the credential."))),(0,r.kt)("h2",{id:"create-presentation"},"Create Presentation"),(0,r.kt)("p",null,"It's not enough to just send our credential as a ",(0,r.kt)("span",{class:"label-role claimer"},"Claimer")," as we also need to prove our ownership.\nThis is done by creating a presentation by signing the ",(0,r.kt)("span",{class:"label-role verifier"},"Verifier"),"'s challenge."),(0,r.kt)("p",null,"Create ",(0,r.kt)("inlineCode",{parentName:"p"},"claimer/createPresentation.js")," helper and copy the following code."),(0,r.kt)(o.Z,{className:"language-js",title:"claimer/createPresentation.js",mdxType:"CodeBlock"},"import * as Kilt from '@kiltprotocol/sdk-js'\n\nexport async function createPresentation(credentialObj, challenge, lightDid, keystore) {\n  // creates a Credential from object\n  const credential = new Kilt.Credential(credentialObj)\n\n  // creates the presentation from credential, keystore, did and challenge\n  const presentation = await credential.createPresentation({\n    signer: keystore,\n    claimerDid: lightDid,\n    challenge: challenge,\n  })\n\n  return presentation\n}\n"),(0,r.kt)("h2",{id:"verify"},"Verify"),(0,r.kt)("p",null,"Let's create our ",(0,r.kt)("inlineCode",{parentName:"p"},"verify.js"),". Here we'll expose ",(0,r.kt)("inlineCode",{parentName:"p"},"getChallenge")," which returns a random and unique\nchallenge for the ",(0,r.kt)("span",{class:"label-role claimer"},"Claimer")," to sign, this is used to prove ownership.\nWe'll also expose ",(0,r.kt)("inlineCode",{parentName:"p"},"verifyCredential")," which will do the actual verification.\nCopy the code below, this completes the ",(0,r.kt)("span",{class:"label-role verifier"},"Verifier")," code!"),(0,r.kt)(o.Z,{className:"language-js",title:"verify.js",mdxType:"CodeBlock"},"import 'dotenv/config'\nimport { cryptoWaitReady } from '@polkadot/util-crypto'\nimport { fileURLToPath } from 'url'\n\nimport * as Kilt from '@kiltprotocol/sdk-js'\n\nimport { createPresentation } from './claimer/createPresentation.js'\nimport { generateKeypairs } from './claimer/generateKeypairs.js'\n\n// returns a challenge for Claimer to sign\nexport function getChallenge() {\n  return Kilt.Utils.UUID.generate()\n}\n\n// verifies validity, ownership & attestation returning true|false\nexport async function verifyPresentation(presentation, challenge) {\n  const credential = new Kilt.Credential(presentation)\n\n  const isValid = await credential.verify({ challenge })\n\n  const isNotRevoked = !credential.attestation.revoked\n\n  // Custom logic\n  // e.g. only allow access if age >= 18\n\n  return isValid && isNotRevoked\n}\n\nexport async function verificationFlow() {\n  await cryptoWaitReady()\n  await Kilt.init({ address: process.env.WSS_ADDRESS })\n\n  // Load credential and claimer DID\n  const credential = JSON.parse(process.env.CLAIMER_CREDENTIAL)\n  const keystore = new Kilt.Did.DemoKeystore()\n  const keys = await generateKeypairs(keystore, process.env.CLAIMER_MNEMONIC)\n  const lightDid = Kilt.Did.LightDidDetails.fromDetails(keys)\n\n  // Verifier sends a unique challenge to the claimer \ud83d\udd4a\n  const challenge = getChallenge()\n\n  // create a presentation and send it to the verifier \ud83d\udd4a\n  const presentation = await createPresentation(credential, challenge, lightDid, keystore)\n\n  // The verifier checks the presentation\n  const isValid = await verifyPresentation(presentation, challenge)\n\n  if (isValid) {\n    console.log('Verification successful! You are allowed to enter the club \ud83c\udf89')\n  } else {\n    console.log('Verification failed! \ud83d\udeab')\n  }\n}\n\n// don't execute if this is imported by another files\nif (process.argv[1] === fileURLToPath(import.meta.url)) {\n  verificationFlow()\n    .catch((e) => {\n      console.log('Error in the verification flow', e)\n      process.exit(1)\n    })\n    .then(() => {\n      process.exit()\n    })\n}\n"),(0,r.kt)("h2",{id:"run"},"Run"),(0,r.kt)("p",null,"run the verification flow on command line:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"node verify.js\n")),(0,r.kt)("p",null,"That's it! all done :-)"))}h.isMDXComponent=!0}}]);